---
import Layout from '../layouts/Layout.astro';
---

<style is:inline>
  #result {
    resize: both;
    width: 100%;
  }
  #zombieOptionsForm > * {
    flex: 1 1 48%;
  }
  #zombieOptionsForm h3 {
    translate: -1em;
    padding-left: 1em;
  }
</style>

<Layout title='Horde Spawns'>
  <div class='min-w-min max-w-4xl m-auto'>
    <div class='bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4'>
      <header>
        <h2 class='text-gray-900 font-bold text-2xl text-center'>
          Horde Spawning
        </h2>

        <label
          class='block text-gray-900 text-lg font-bold mb-2'
          for='coordinates'
        >
          Coordinates
        </label>
        <input
          type='text'
          id='coordinates'
          name='coordinates'
          required
          class='border rounded w-full py-2 px-3 mb-2 text-gray-900 leading-tight focus:outline-none focus:shadow-outline'
        />
      </header>

      <div class='md:flex md:items-center gap-5'>
        <div class='md:flex md:items-center gap-5'>
          <label class='block text-gray-900 text-lg font-bold' for='Zlevel'>
            ZAdjust:
          </label>
          <input
            type='number'
            id='zAdjust'
            name='zAdjust'
            value='0'
            step='100'
            class='border rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:shadow-outline'
          />
        </div>

        <div class='md:flex md:items-center gap-5'>
          <label
            class='block text-gray-900 text-lg font-bold mb-2'
            for='radius'
          >
            Radius:
          </label>
          <input
            type='number'
            id='radius'
            name='radius'
            class='border rounded w-full py-2 px-3 text-gray-900 leading-tight focus:outline-none focus:shadow-outline'
            value='1000'
            step='100'
            min='0'
            max=''
          />
        </div>
      </div>

      <div id='zombies' class='my-3'>
        <legend class='block text-gray-700 text-lg font-bold gap-5'>
          Zombie Spawns:
        </legend>

        <div id='zombieOptionsForm' class='flex flex-row flex-wrap gap-6'></div>

        <button
          class='bg-green-700 hover:bg-green-600 text-white font-bold py-2 px-4 mt-6 rounded focus:outline-none focus:shadow-outline'
          type='button'
          onclick='
          circleSpawner()
          '
        >
          Submit
        </button>
      </div>

      <footer class='relative'>
        <label for='result'>Copy & Paste:</label><br />
        <button
          id='copyButton'
          class='absolute right-2 bg-blue-500 hover:bg-blue-700 text-white text-xs font-bold py-1 px-1 my-2 rounded focus:outline-none focus:shadow-outline'
        >
          Copy All
        </button>
        <textarea
          id='result'
          readonly
          rows='4'
          class='border rounded w-full py-2 px-4 text-gray-900 leading-tight focus:outline-none focus:shadow-outline'
        ></textarea>
      </footer>
    </div>
  </div>

  <script is='inline'>
    // Define the zombieOptions variable in the global scope
    let zombieOptions;

    // Define the generateZombieOptionsInputFields function in the global scope
    function generateZombieOptionsInputFields() {
      const zombieOptionsForm = document.getElementById('zombieOptionsForm');
      const groupedZombieOptions = groupZombieOptionsByCategory();

      // Loop through the grouped zombie options and create input fields
      for (const category in groupedZombieOptions) {
        if (groupedZombieOptions.hasOwnProperty(category)) {
          const categoryOptions = groupedZombieOptions[category];

          // Create a div for each category
          const categoryDiv = document.createElement('div');
          categoryDiv.className = 'category'; // You can define a class for the category div here
          zombieOptionsForm.appendChild(categoryDiv);

          const categoryHeader = document.createElement('h3');
          categoryHeader.className =
            'block text-gray-900 text-md hover:bg-gray-100 font-bold mb-2';
          categoryHeader.textContent = category;
          categoryDiv.setAttribute('id', category);
          categoryDiv.appendChild(categoryHeader);

          categoryOptions.forEach((option) => {
            const inputField = document.createElement('div');
            inputField.className = 'md:flex md:items-center gap-5 mb-2';
            inputField.innerHTML = `
      <input
        type='number'
        id='${option.id}'
        name='${option.id}'
        value='0'
        min='0'
        class='border rounded w-16 py-1 px-2 text-gray-700'
      />
      <label class='w-full' for='${option.id}'>${option.name}</label>
    `;

            categoryDiv.appendChild(inputField);
          });
        }
      }
    }

    function groupZombieOptionsByCategory() {
      const groupedZombieOptions = {};

      // Loop through the loaded zombie options and group them by category
      for (const optionId in zombieOptions) {
        if (zombieOptions.hasOwnProperty(optionId)) {
          const option = zombieOptions[optionId];
          const category = getCategoryFromId(option.id);

          if (!groupedZombieOptions[category]) {
            groupedZombieOptions[category] = [];
          }

          groupedZombieOptions[category].push(option);
        }
      }

      return groupedZombieOptions;
    }

    function getCategoryFromId(optionId) {
      // Extract the category name.
      return optionId.split('_')[2]; // Assuming the category is the third part of the ID
    }

    // Load the zombie options from the JSON file
    fetch('./zombieOptions.json')
      .then((response) => response.json())
      .then((loadedZombieOptions) => {
        // Assign the loaded zombie options to the global variable
        zombieOptions = loadedZombieOptions;

        // Call the function to generate the zombie options input fields
        generateZombieOptionsInputFields();
      });

    // Define the horde function in the global scope
    function circleSpawner() {
      // Get the input values
      const coordinates = document.getElementById('coordinates').value;
      let radius = document.getElementById('radius').value; // Change to let
      radius = parseFloat(Number(radius));
      let zAdjust = document.getElementById('zAdjust').value; // Change to let
      zAdjust = parseFloat(Number(zAdjust));
      const regex = /X=([-+]?\d*\.\d+)\s*Y=([-+]?\d*\.\d+)\s*Z=([-+]?\d*\.\d+)/;
      const match = coordinates.match(regex);
      if (match) {
        let x = parseFloat(match[1]);
        let y = parseFloat(match[2]);
        console.log('y:' + y);
        let z = parseFloat(match[3]); // Parse z as a float

        // Initialize the hordeResult string
        let hordeResult = '';

        let centerX = x; // Calculate centerX once
        let centerY = y; // Calculate centerY once
        console.log(centerY);

        const roundedZ = Math.round(z / 100) * 100; // Rename z to avoid redeclaration

        for (const optionId in zombieOptions) {
          if (zombieOptions.hasOwnProperty(optionId)) {
            const option = zombieOptions[optionId];
            const count = parseInt(document.getElementById(option.id).value);
            if (count > 0) {
              // Calculate the coordinates for the points on the circle
              for (let i = 0; i < count; i++) {
                const angle = (i / count) * 2 * Math.PI;
                console.log('angle: ' + angle);
                const circleX = centerX * Math.cos(angle);
                const circleY = centerY * Math.sin(angle);
                console.log(circleY);
                const roundedX = Math.round(circleX / 1) * 1;
                const roundedY = Math.round(circleY / 1) * 1;
                xAdjusted = roundedX + radius;
                yAdjusted = roundedY + radius; // Calculate centerY once

                hordeResult += `#SpawnZombie ${
                  option.id
                } 1 Location "X=${xAdjusted} Y=${yAdjusted} Z=${
                  roundedZ + zAdjust
                }"\n`;
              }
            }
          }
        }
        // Display the result in the textarea
        document.getElementById('result').value = hordeResult;
      }
    }

    // Add an event listener to update the radius value
    const radiusInput = document.getElementById('radius');
    radiusInput.addEventListener('input', function () {
      document.getElementById('radius').value = this.value;
    });

    function copyToClipboard() {
      const textarea = document.getElementById('result');
      textarea.select();
      document.execCommand('copy');
    }

    const copyButton = document.getElementById('copyButton');
    copyButton.addEventListener('click', copyToClipboard);
  </script>
</Layout>
