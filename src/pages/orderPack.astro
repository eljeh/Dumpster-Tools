---
import Layout from '../layouts/Layout.astro';
---

<style is:inline>
  .wrapper {
    width: 120ch;
  }
</style>

<Layout title='BOT API'>
  <h2 class='text-2xl text-center'>Order Pack</h2>
  <div class='wrapper'>
    <form class='w-full flex flex-col item-center'>
      <div class='flex items-center justify-center mb-6'>
        <label
          for='playerIDSelect'
          class='block font-bold md:text-right pr-4'
          for='inline-full-name'
        >
          Player Name
        </label>

        <select id='playerIDSelect'>
          <option value='76561198187036603'>...loading data</option>
        </select>
      </div>

      <div class='flex items-center justify-center mb-6'>
        <label
          for='packNameSelect'
          class='block font-bold md:text-right mb-1 md:mb-0 pr-4'
          for='inline-full-name'
        >
          Pack Name
        </label>

        <select id='packNameSelect'>
          <option value='170270'>...loading data</option>
        </select>
      </div>

      <div class='flex items-center justify-center mb-6'>
        <div class=''>
          <button
            id='orderButton'
            class='shadow focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded'
          >
            Order Pack
          </button>
        </div>
      </div>
    </form>

    <div>
      <script>
        // Get the order button element
        const orderButton = document.getElementById('orderButton');

        // Add event listener to handle button click
        orderButton.addEventListener('click', async (event) => {
          event.preventDefault();
          console.log('Ordering pack...');

          // Get the selected player and pack elements
          const playerIDSelect = document.getElementById('playerIDSelect');
          const packNameSelect = document.getElementById('packNameSelect');

          // Check if both player and pack are selected
          if (playerIDSelect.value && packNameSelect.value) {
            try {
              // Send a POST request to order the pack
              const response = await fetch(
                `https://api.whalleybot.com/bot/7ac35e92/SendPack/${playerIDSelect.value}/${packNameSelect.value}/1`,
                {
                  method: 'POST',
                  headers: {
                    Accept: '*/*',
                    Authorization: 'WhalleyBotAPI_F935H3ucUJRv7g==',
                  },
                },
              );

              // Check if the response is okay
              if (!response.ok) {
                throw new Error('Network response was not ok');
              }

              // Parse the response data
              const data = await response.json();
              console.log('Order pack response:', data);
            } catch (error) {
              console.error('Error ordering pack:', error);
            }
          } else {
            console.error('Please select a player and pack');
          }
        });

        // Fetch data from the given URL
        async function fetchData(url) {
          try {
            const response = await fetch(url, {
              method: 'GET',
              headers: {
                Accept: '*/*',
                Authorization: 'WhalleyBotAPI_F935H3ucUJRv7g==',
              },
            });

            // Check if the response is okay
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }

            // Parse the response data
            const data = await response.json();
            return data;
          } catch (error) {
            console.error('Error fetching or parsing data:', error);
            throw error;
          }
        }

        // Populate the player select dropdown
        async function populatePlayerSelect() {
          try {
            const data = await fetchData(
              `https://api.whalleybot.com/bot/7ac35e92/PlayerLocations`,
            );
            console.log('Player data:', data); // Log the fetched player data

            const playerSelect = document.getElementById('playerIDSelect');
            playerSelect.innerHTML =
              '<option value="">Select a player</option>';

            // Add options to the player select dropdown
            data.forEach((player) => {
              const option = new Option(player.playerName, player.steamID);
              playerSelect.appendChild(option);
            });
          } catch (error) {
            console.error('Error populating player select:', error);
          }
        }

        // Populate the pack select dropdown
        async function populatePackSelect() {
          try {
            let allPacks = [];
            let pageNumber = 1;
            let nextPageExists = true;

            // Fetch all packs until no more pages exist
            while (nextPageExists) {
              const data = await fetchData(
                `https://api.whalleybot.com/bot/7ac35e92/GetPacks/${pageNumber}`,
              );

              // Check if there are packs in the current page
              if (data && data.packData && data.packData.length > 0) {
                allPacks = allPacks.concat(data.packData);
                pageNumber++;
              } else {
                nextPageExists = false;
              }
            }

            const packSelect = document.getElementById('packNameSelect');
            packSelect.innerHTML =
              '<option value="">Select a pack name</option>';

            // Add options to the pack select dropdown
            allPacks.forEach((pack) => {
              const option = new Option(pack.name, pack.packID);
              packSelect.add(option);
            });
          } catch (error) {
            console.error('Error populating pack select:', error);
          }
        }

        // Populate the dropdowns when the page loads
        populatePlayerSelect();
        populatePackSelect();
      </script>
    </div>
  </div>
</Layout>
