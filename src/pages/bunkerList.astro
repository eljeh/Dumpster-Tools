---
import Layout from '../layouts/Layout.astro';

// import { netlifyIdentity } from 'netlify-identity-widget';
// const user = netlifyIdentity.currentUser();
// let LayoutFile;
// if (user) {
//   LayoutFile = '../layouts/Layout.astro';
// } else {
//   LayoutFile = '../layouts/Layout-loggedPut.astro';
// }

// import  Layout from LayoutFile;
---

<Layout title='Bunker List - Dumpster Tools'>
  <div class='wrapper' transition:name='wrapper'>
    <h2 class='mb-8 text-2xl text-center'>Bunker List</h2>
    <div id='buttonPanel' class='flex flex-col gap-2 justify-center'></div>
  </div>

  <script is='inline'>
    let bunkers = [];

    async function getBunkerList() {
      try {
        const response = await fetch(
          `https://api.whalleybot.com/bot/217fc652/GetBunkers`,
          {
            method: 'GET',
            headers: {
              Accept: '*/*',
              Authorization: 'WhalleyBotAPI_F935H3ucUJRv7g==',
            },
          },
        );

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const dataB = await response.json();
        bunkers = dataB;
        //console.log(bunkers);
        const buttonPanel = document.getElementById('buttonPanel');

        const normalBunkers = [
          {
            id: 'D0',
            status: 'Normal',
            location: 'X=-871767.875 Y=597019.250 Z=63084.723',
            sector: 'D0',
          },
          {
            id: 'D3',
            status: 'Normal',
            location: 'X=142191.672 Y=546498.188 Z=24782.061',
            sector: 'D3',
          },
          {
            id: 'C2',
            status: 'Normal',
            location: 'X=-221955.922 Y=186481.688 Z=76617.336',
            sector: 'C2',
          },
          {
            id: 'B4',
            status: 'Normal',
            location: 'X=443626.750 Y=-13702.469 Z=11979.164',
            sector: 'B4',
          },
          {
            id: 'A2',
            status: 'Normal',
            location: 'X=-40887.375 Y=-324878.438 Z=16259.652',
            sector: 'A2',
          },
          {
            id: 'AO',
            status: 'Normal',
            location: 'X=-769538.625 Y=-349752.062 Z=6468.148',
            sector: 'AO',
          },
          {
            id: 'Z4',
            status: 'Normal',
            location: 'X=521845.781 Y=-823576.562 Z=4945.017',
            sector: 'Z4',
          },
          {
            id: 'Z0',
            status: 'Normal',
            location: 'X=-700999.375 Y=-792435.812 Z=10776.563',
            sector: 'Z0',
          },
        ];

        //append normalBunkers to dataB
        dataB.push(...normalBunkers);

        // Function to create sector buttons
        function createSectorButtons(sectorPrefix) {
          const sectors = dataB
            .filter((bunker) => bunker.sector.startsWith(sectorPrefix))
            .sort((a, b) => {
              const numA = parseInt(a.sector.slice(1), 10);
              const numB = parseInt(b.sector.slice(1), 10);
              return numB - numA;
            });

          const sectorDiv = document.createElement('div');
          sectorDiv.id = `${sectorPrefix.toLowerCase()}Sectors`;
          sectorDiv.className = 'flex gap-4';
          sectors.forEach((bunker) => {
            const div = document.createElement('div'); // Changed from button to div
            div.onclick = () => teleportTo(bunker.location); // Keep the click event

            div.className = `btn ${bunker.status.toLowerCase()}`; // Retain the status class
            div.title = bunker.location; // Retain the title

            let totalSeconds = Math.floor(
              (bunker.nextAcivationTime || 0) / 10000,
            );
            //console.log('bunker.nextAcivationTime', bunker.nextAcivationTime);
            //console.log('totalSeconds', totalSeconds);
            // subtract from 24 hour

            const hours = Math.floor(totalSeconds / 3600);

            const minutes = Math.floor((totalSeconds % 3600) / 60);
            const seconds = totalSeconds % 60;
            const formattedTime = `${hours}h ${minutes}m ${seconds}s`;

            div.innerHTML = `${bunker.status}<br>${bunker.sector}`; // Update text content

            sectorDiv.appendChild(div); // Append the div instead of button
          });
          buttonPanel.appendChild(sectorDiv);
        }

        // Create buttons for each sector type
        ['D', 'C', 'B', 'A', 'Z'].forEach(createSectorButtons);
      } catch (error) {
        console.error('Error:', error);
        alert(
          'An error occurred while fetching the bunker data. Please try again later.',
        );
      }
    }

    function teleportTo(element) {
      //var teleportToText = element.getAttribute('title');
      var teleportToText = element;
      teleportToText = '#Teleport ' + teleportToText; // Prepend "#TeleportToVehicle "

      // Create a temporary textarea to copy the modified text to the clipboard
      var tempText = document.createElement('textarea');
      tempText.value = teleportToText;
      document.body.appendChild(tempText);
      tempText.select();
      document.execCommand('copy');
      alert('Copied to clipboard');
      document.body.removeChild(tempText);
    }

    getBunkerList();
  </script>
</Layout>

<style is:inline>
  .wrapper {
    width: 65em;
  }
  .wrapper form {
    width: 100%;
  }
  .wrapper textarea {
    height: 32em;
    width: 60em;
    white-space: nowrap;
  }

  .wrapper .flex .btn {
    background: hsl(from var(--color-accent) h s 24);
    color: var(--font-color);
  }

  .wrapper .flex .btn:hover {
    outline: 0.25em solid var(--color-primary);
  }

  .wrapper .flex .btn {
    margin-top: 1em;
    background: var(--color-tertiary);
    color: var(--font-color);
    border: none;
    padding: 0.75em 1em;
    border-radius: 0.5em;
    cursor: pointer;
    text-align: center;
    min-width: 6em;
    box-shadow: -1px 1px 7px 0px #00000052;
  }

  .wrapper .flex .btn.normal {
    border: 3px solid var(--color-primary);
  }
  .wrapper .flex .btn.active {
    background: var(--color-primary);
    color: var(--font-color);
  }

  .wrapper .flex .btn.locked {
    color: var(--font-color);
  }
  .backDrop span:nth-of-type(2) {
    --color: red;
    --width: 40em;
    --height: 100em;
    --rotate: 35deg;
    --blur: 8em;
    --border-radius: 50%;
    --top: 75%;
    --left: 50%;
  }
</style>
