---
import Layout from '../layouts/Layout.astro';
---

<style is:inline>
  body {
    background: #1e1f22;
    color: #c2c2c2;
  }
  .wrapper {
    margin: 1em 1.5em;
  }
  #result {
    resize: both;
    width: 100%;
  }
  #zombieOptionsForm > * {
    flex: 1 1 48%;
  }
  #zombieOptionsForm h4 {
    translate: -1em;
    padding-left: 1em;
  }
  .wrapper input,
  .wrapper button,
  .wrapper textarea {
    background: #313338;
    color: #d1d1d1;
    border: none;
    padding: 1em 1.25em;
    border-radius: 0.5em;
    text-wrap: nowrap;
    min-width: 5.6em;
  }

  .category > div:hover label,
  .category input:focus ~ label {
    --tw-bg-opacity: 1;
    background-color: #313338;
    cursor: pointer;
  }
</style>

<Layout title='Horde Spawns'>
  <div class='min-w-min max-w-4xl m-auto gap-'>
    <div class='wrapper shadow-md rounded px-8 pt-6 pb-8 mb-4'>
      <header>
        <h2 class='font-bold text-2xl text-center'>Horde Spawner</h2>
      </header>
      <div class='md:flex flex-col gap-2'>
        <label class='block text-lg font-bold' for='coordinates'>
          Coordinates
        </label>
        <input
          type='text'
          id='coordinates'
          name='coordinates'
          required
          class='border rounded w-full py-2 px-3 mb-2 leading-tight'
        />
      </div>

      <div id='zombies' class='my-3'>
        <h3 class='block text-lg font-bold'>Zombie Spawns:</h3>

        <div id='zombieOptionsForm' class='flex flex-row flex-wrap gap-6'></div>
      </div>

      <div class='flex flex-col my-5'>
        <div class='block text-l font-bold'>Scatter Controls</div>
        <div id='scatterControls' class='md:flex md:items-center gap-5 mb-5'>
          <div class='md:flex md:items-center gap-2'>
            <label class='block text-md font-bold' for='zAdjust-scatter'>
              ZAdjust:
            </label>
            <input
              type='number'
              id='zAdjust-scatter'
              name='zAdjust scatter'
              value='0'
              step='100'
              class='border rounded w-28 py-2 px-3 leading-tight'
            />
          </div>
          <div class='md:flex md:items-center gap-2'>
            <label class='block text-md font-bold' for='distance'>
              Distance:
            </label>
            <input
              type='number'
              id='distance'
              name='distance'
              value='2000'
              step='500'
              min='0'
              class='border rounded w-28 py-2 px-3 leading-tight'
            />
          </div>
          <div class='md:flex md:items-center gap-2'>
            <label class='block t text-md font-bold' for='spread'>
              Spread:
            </label>
            <input
              type='number'
              id='spread'
              name='spread'
              class='border rounded w-28 py-2 px-3 leading-tight'
              value='500'
              step='100'
              min='0'
              max=''
            />
          </div>
        </div>

        <div class='block text-lg font-bold'>Circle Controls</div>
        <div id='circleControls' class='md:flex md:items-center gap-5'>
          <div class='md:flex md:items-center gap-2'>
            <label class='block text-md font-bold' for='zAdjust-circle'>
              ZAdjust:
            </label>
            <input
              type='number'
              id='zAdjust-circle'
              name='zAdjust Circle'
              value='0'
              step='100'
              class='border rounded w-28 py-2 px-3 leading-tight'
            />
          </div>

          <div class='md:flex md:items-center gap-2'>
            <label class='block text-md font-bold mb-2' for='radius'>
              Radius:
            </label>
            <input
              type='number'
              id='radius'
              name='radius'
              class='border rounded w-28 py-2 px-3 leading-tight focus:outline-none focus:shadow-outline'
              value='1000'
              step='100'
              min='0'
              max=''
            />
          </div>
        </div>
      </div>

      <div class='flex'>
        <button
          class='font-bold py-2 px-4 mt-6 mr-6 rounded'
          type='button'
          onclick='
          scattered()
          '
        >
          Scattered
        </button>
        <button
          class='font-bold py-2 px-4 mt-6 rounded focus:outline-none'
          type='button'
          onclick='
          circleSpawner()
          '
        >
          Circle
        </button>
      </div>

      <footer class='relative'>
        <label class='block text-md font-bold'>Script</label>
        <button
          id='copyButton'
          class='absolute right-0 mr-6 bg-blue-500 hover:bg-blue-700 text-white text-xs font-bold py-1 px-1 my-2 rounded'
        >
          Copy All
        </button>
        <textarea
          id='result'
          readonly
          rows='6'
          class='border rounded w-full py-2 px-4 leading-tight focus:outline-none focus:shadow-outline'
        ></textarea>
      </footer>
    </div>
  </div>

  <script is='inline'>
    function getRandomNumber(min, max, step) {
      return Math.floor(Math.random() * ((max - min) / step + 1)) * step + min;
    }
    // Define the zombieOptions variable in the global scope
    let zombieOptions;

    // Define the generateZombieOptionsInputFields function in the global scope
    function generateZombieOptionsInputFields() {
      const zombieOptionsForm = document.getElementById('zombieOptionsForm');
      const groupedZombieOptions = groupZombieOptionsByCategory();

      // Loop through the grouped zombie options and create input fields
      for (const category in groupedZombieOptions) {
        if (groupedZombieOptions.hasOwnProperty(category)) {
          const categoryOptions = groupedZombieOptions[category];

          // Create a div for each category
          const categoryDiv = document.createElement('div');
          categoryDiv.className = 'category'; // You can define a class for the category div here
          zombieOptionsForm.appendChild(categoryDiv);

          const categoryHeader = document.createElement('h4');
          categoryHeader.className =
            'block rounded w-full py-2 px-3 text-md font-bold mb-2';
          categoryHeader.textContent = category;
          categoryDiv.setAttribute('id', category);
          categoryDiv.appendChild(categoryHeader);

          categoryOptions.forEach((option) => {
            const inputField = document.createElement('div');
            inputField.className = 'md:flex md:items-center gap-2 mb-2';
            inputField.innerHTML = `
          <input
            type='number'
            id='${option.id}'
            name='${option.id}'
            value='0'
            min='0'
            max='50'
            class= 'border rounded w-16 py-2 px-3 text-gray-900 leading-tight'
          />
          <label class='rounded w-full py-1 px-2' for='${option.id}'>${option.name}</label>
        `;

            categoryDiv.appendChild(inputField);
          });
        }
      }
    }

    function groupZombieOptionsByCategory() {
      const groupedZombieOptions = {};

      // Loop through the loaded zombie options and group them by category
      for (const optionId in zombieOptions) {
        if (zombieOptions.hasOwnProperty(optionId)) {
          const option = zombieOptions[optionId];
          const category = getCategoryFromId(option.id);

          if (!groupedZombieOptions[category]) {
            groupedZombieOptions[category] = [];
          }

          groupedZombieOptions[category].push(option);
        }
      }

      return groupedZombieOptions;
    }

    function getCategoryFromId(optionId) {
      // Extract the category name.
      return optionId.split('_')[2]; // Assuming the category is the third part of the ID
    }

    // Load the zombie options from the JSON file
    fetch('../data/zombieOptions.json')
      .then((response) => response.json())
      .then((loadedZombieOptions) => {
        // Assign the loaded zombie options to the global variable
        zombieOptions = loadedZombieOptions;

        // Call the function to generate the zombie options input fields
        generateZombieOptionsInputFields();
      });

    // Define the horde function in the global scope
    function scattered() {
      // Get the input values
      const coordinates = document.getElementById('coordinates').value;
      let zAdjust = document.getElementById('zAdjust-scatter').value;
      zAdjust = parseFloat(Number(zAdjust));
      let distance = document.getElementById('distance').value;
      distance = parseFloat(Number(distance));
      const regex = /X=([-+]?\d*\.\d+)\s*Y=([-+]?\d*\.\d+)\s*Z=([-+]?\d*\.\d+)/;
      const match = coordinates.match(regex);
      if (match) {
        let x = parseFloat(match[1]);
        let y = parseFloat(match[2]);
        let z = parseFloat(match[3]); // Parse z as a float

        // Initialize the hordeResult string
        let hordeResult = '';

        let centerX = Math.round(x / 1) * 1; // Calculate centerX once
        let centerY = Math.round(y / 1) * 1; // Calculate centerY once
        let roundedZ = Math.round(z / 100) * 100; // Rename z to avoid redeclaration
        // Loop through the zombie options and construct the hordeResult string
        for (const optionId in zombieOptions) {
          if (zombieOptions.hasOwnProperty(optionId)) {
            const option = zombieOptions[optionId];
            const count = parseInt(document.getElementById(option.id).value);
            roundedZ = roundedZ + zAdjust;
            if (count > 0) {
              for (let i = 0; i < count; i++) {
                // Generate random numbers for X and Y
                const randomX = getRandomNumber(distance * -1, distance, 100);
                const randomY = getRandomNumber(distance * -1, distance, 100);

                // Add random values to X and Y
                centerX += randomX;
                centerY += randomY;

                // Round the coordinates to the nearest 10
                centerX = Math.round(centerX / 1) * 1;
                centerY = Math.round(centerY / 1) * 1;
                roundedZ = Math.round(roundedZ / 100) * 100;
                hordeResult += `#SpawnZombie ${option.id} 1 Location "X=${centerX} Y=${centerY} Z=${roundedZ}"\n`;
              }
            }
          }
        }

        // Display the result in the textarea
        document.getElementById('result').value = hordeResult;
      }
    }

    // Define the horde function in the global scope
    function circleSpawner() {
  // Get the input values
  const coordinates = document.getElementById('coordinates').value;
  let radius = document.getElementById('radius').value; // Change to let
  radius = parseFloat(Number(radius));
  let zAdjust = document.getElementById('zAdjust-circle').value; // Change to let
  zAdjust = parseFloat(Number(zAdjust));
  const regex = /X=([-+]?\d*\.\d+)\s*Y=([-+]?\d*\.\d+)\s*Z=([-+]?\d*\.\d+)/;
  const match = coordinates.match(regex);
  if (match) {
    let x = parseFloat(match[1]);
    let y = parseFloat(match[2]);
    let z = parseFloat(match[3]);

    // Initialize the hordeResult string
    let hordeResult = '';

    const roundedZ = Math.round(z / 100) * 100; // Rename z to avoid redeclaration

    for (const optionId in zombieOptions) {
      if (zombieOptions.hasOwnProperty(optionId)) {
        const option = zombieOptions[optionId];
        const count = parseInt(document.getElementById(option.id).value);
        if (count > 0) {
          // Calculate the coordinates for the points on the circle
          for (let i = 0; i < count; i++) {
            const angle = (i / count) * 2 * Math.PI;
            const circleX = x + radius * Math.cos(angle);
            const circleY = y + radius * Math.sin(angle);
            const xAdjusted = Math.round(circleX / 1) * 1;
            const yAdjusted = Math.round(circleY / 1) * 1;
            hordeResult += `#SpawnZombie ${
              option.id
            } 1 Location "X=${xAdjusted} Y=${yAdjusted} Z=${
              roundedZ + zAdjust
            }"\n`;
          }
        }
      }
    }
    // Display the result in the textarea
    document.getElementById('result').value = hordeResult;
  }
}

    // Add an event listener to update the radius value
    const radiusInput = document.getElementById('radius');
    radiusInput.addEventListener('input', function () {
      document.getElementById('radius').value = this.value;
    });

    const copyButton = document.getElementById('copyButton');
    const textarea = document.getElementById('result');

    copyButton.addEventListener('click', async () => {
      await navigator.clipboard.writeText(textarea.value);
      alert('Content copied to clipboard!');
    });
  </script>
</Layout>
e
