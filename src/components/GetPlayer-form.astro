<form class='w-full flex flex-col item-center'>
	<div class='flex flex-col items-start justify-center mb-6'>
		<!-- playerIDgp -->
		<label class='block font-bold pr-4 mb-2' for='playerIDgp'>
			Player Id (Discord/Steam)
		</label>
		<input
			type='text'
			id='playerIDgp'
			name='playerIDgp'
			required
			class='border rounded mb-2'
		/>
	</div>
	<!--  IG Players -->
	<div class='flex flex-col my-2'>
		<label class='font-bold mb-2' for='playersSelected'>
			In Game Players
		</label>

		<div class='flex'>
			<fieldset id='playersSelected' class='playersList'>
				<legend>No one in game</legend>
			</fieldset>
		</div>
	</div>

	<footer class='flex items-center justify-end mb-6'>
		<button id='getPlayerButton' class='glassmorphism'>
			Get Player Info
		</button>
	</footer>
</form>

<div class='playerInfoWrapper'>
	<div id='playerInfo'></div>
	<div id='squadInfo'></div>
	<div id='squadCounts'>
		<span id='memberCount'></span>
		<span id='flagCount'></span>
		<span id='vehicleCount'></span>
	</div>
	<div id='details'></div>
</div>

<script>
	document.addEventListener('astro:page-load', () => {
		// Get the order button element
		const getPlayerButton = document.getElementById('getPlayerButton');

		const playerInfo = document.getElementById('playerInfo');
		const squadInfo = document.getElementById('squadInfo');
		const squadCounts = document.getElementById('squadCounts');
		const details = document.getElementById('details');

		const memberCount = document.getElementById('memberCount');
		const flagCount = document.getElementById('flagCount');
		const vehicleCount = document.getElementById('vehicleCount');

		function populateIGPlayers() {
			const url = 'https://api.whalleybot.com/bot/217fc652/PlayerLocations';
			fetch(url, {
				method: 'GET',
				headers: {
					Accept: '*/*',
					Authorization: 'WhalleyBotAPI_F935H3ucUJRv7g==',
				},
			})
				.then((response) => {
					if (!response.ok) {
						throw new Error('Network response was not ok');
					}
					return response.json();
				})
				.then((data) => {
					// Clear existing table rows
					const playersList = document.getElementById('playersSelected');
					playersList.innerHTML = '';

					// Populate table with JSON data
					data.forEach((player) => {
						const row = document.createElement('li');
						row.classList.add('flex', 'gap-4');
						row.innerHTML = `
            <input type="radio" id="${player.steamID}" name="selectedPlayers" value="${player.steamID}">
						<label for="${player.steamID}">
            	<span>${player.playerName}</span>
            	<span>${player.lastKnownLocation}</span>
						</label>
          `;
						playersList.appendChild(row);
					});
				})
				.catch((error) => {
					console.error('Error fetching or parsing data: ', error);
				});
		}
		// Call the function to display JSON data as a table
		populateIGPlayers();

		// Add event listener to handle button click
		getPlayerButton.addEventListener('click', async (event) => {
			event.preventDefault();
			const playerInfoWrapper = document.querySelector('.playerInfoWrapper');
			playerInfoWrapper.classList.add('panel');
			playerInfo.innerHTML = ``;
			squadInfo.innerHTML = ``;
			details.innerHTML = ``;

			const selectedPlayer = document.querySelector(
				'input[name="selectedPlayers"]:checked',
			);
			// Get the selected player and pack elements
			const playerID = document.getElementById('playerIDgp');
			// if playerID is empty, use the selected player
			if (!playerID.value) {
				playerID.value = selectedPlayer.id;
			}

			if (playerID.value) {
				try {
					// Send a POST request to order the pack
					const response = await fetch(
						`https://api.whalleybot.com/bot/217fc652/GetPlayer/${playerID.value}/`,
						{
							method: 'GET',
							headers: {
								Accept: '*/*',
								Authorization: 'WhalleyBotAPI_F935H3ucUJRv7g==',
							},
						},
					);

					// Check if the response is okay
					if (!response.ok) {
						throw new Error('Network response was not ok');
					}
					playerInfo.innerHTML = `Getting info for ${playerID.value}`;

					// Parse the response data
					const data = await response.json();

					playerInfo.innerHTML = `Player info: <strong>${data.Player.PlayerName}</strong>`;
					playerInfo.innerHTML += `<br>Discord ID: ${data.Player.DiscordID}`;
					playerInfo.innerHTML += `<br>Steam ID: ${data.Player.SteamID}`;
					playerInfo.innerHTML += `<br>IP Address: ${data.Player.IP}`;
					playerInfo.innerHTML += `<br>`;
					playerInfo.innerHTML += `<br>Account: ${data.Player.AccountNumber}`;
					playerInfo.innerHTML += `<br>ü™ô ${data.Player.Coins.toLocaleString()} &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp; üíµ  ${data.Player.CreditBalance.toLocaleString()} &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp; üßà  ${data.Player.GoldBalance.toLocaleString()}`;

					const PlayersSquadID = data.SquadInfo.ID;

					// get list of sqaudmembers
					const squadResponse = await fetch(
						`https://api.whalleybot.com/bot/217fc652/GetSquad?SquadID=${PlayersSquadID}`,
						{
							method: 'GET',
							headers: {
								Accept: '*/*',
								Authorization: 'WhalleyBotAPI_F935H3ucUJRv7g==',
							},
						},
					);
					const dataS = await squadResponse.json();
					const SquadData = dataS[0];
					const squadMembers = Object.values(SquadData.squadMember);
					const activeMembers = [];
					squadMembers.forEach((member) => {
						if (member.playerData !== null) {
							activeMembers.push(member.playerData.steamID);
						}
					});

					//console.log('activeMembers', activeMembers);

					getFlagData(activeMembers);
					getSquadData(data.SquadInfo.ID);
					getVehicleInfo(squadMembers);
				} catch (error) {
					console.error('Error Player info:', error);
				}
			} else {
				console.error('Please provide a player ID');
			}

			// reset form
			document.getElementById('playerIDgp').value = '';
		});

		async function getSquadData(PlayersSquadID) {
			const response = await fetch(
				`https://api.whalleybot.com/bot/217fc652/GetSquad?SquadID=${PlayersSquadID}`,
				{
					method: 'GET',
					headers: {
						Accept: '*/*',
						Authorization: 'WhalleyBotAPI_F935H3ucUJRv7g==',
					},
				},
			);

			// Check if the response is okay
			if (!response.ok) {
				throw new Error('Network response was not ok');
			}

			// Parse the response data
			const data = await response.json();
			const SquadData = data[0];

			squadInfo.innerHTML += `<hr class="infoHr"/>`;
			squadInfo.innerHTML += `<br>Squad: ${SquadData.squadName} (${SquadData.id})`;

			const squadMembers = Object.values(SquadData.squadMember);

			//Calculate the total creditBalance and goldBalance of the squad
			let totalCreditBalance = 0;
			let totalGoldBalance = 0;
			let totalCoins = 0;

			squadMembers.forEach((member) => {
				if (member.playerData !== null) {
					totalCreditBalance += member.playerData.creditBalance;
					totalGoldBalance += member.playerData.goldBalance;
					totalCoins += member.playerData.coins;
				}
			});

			squadInfo.innerHTML += `<br>ü™ô ${totalCoins.toLocaleString()} &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp; üíµ  ${totalCreditBalance.toLocaleString()} &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp; üßà  ${totalGoldBalance.toLocaleString()}<br>`;

			// Rank is a string 1-4 so sort by rank
			squadMembers.sort((a, b) => parseInt(b.rank) - parseInt(a.rank));
			details.innerHTML += `<br>`;
			const numMembers = squadMembers.length;
			memberCount.innerHTML = `ü™ñ Members: ${numMembers} &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;`;
			details.innerHTML += `<br> ${numMembers} Members`;
			squadMembers.forEach((member) => {
				if (member.playerData === null) {
					details.innerHTML += `<br><strong>Unknown</strong> (${member.steamID}) `;
					details.innerHTML += `<br>`;
				} else {
					details.innerHTML += `<br><strong>${member.playerData.playerName}</strong> ${member.rank === '4' ? 'üëë' : ''} (${member.steamID}) `;
					details.innerHTML += `<br>ü™ô ${member.playerData.coins.toLocaleString()}  &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp; üíµ ${member.playerData.creditBalance.toLocaleString()}  &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp; üßà ${member.playerData.goldBalance.toLocaleString()}  &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp; ‚öîÔ∏è ${member.playerData.totalDeaths}/${member.playerData.totalKills}`;
					details.innerHTML += `<br>`;
				}
			});
		}

		function isWithinPVP(flagLocationX, flagLocationY) {
			const PVP = {
				topLeftX: -904795.125, // Left-most X
				topLeftY: 619200.0, // Top-most Y
				bottomRightX: -297316.625, // Right-most X
				bottomRightY: -904795.125, // Bottom-most Y
			};

			// Check if the flag location is within the PVP zone
			return (
				flagLocationX >= PVP.topLeftX && // Right of left edge
				flagLocationX <= PVP.bottomRightX && // Left of right edge
				flagLocationY <= PVP.topLeftY && // Below top edge
				flagLocationY >= PVP.bottomRightY // Above bottom edge
			);
		}

		async function getFlagData(squadMembers) {
			const response = await fetch(
				`https://api.whalleybot.com/bot/217fc652/FlagLocations`,
				{
					method: 'GET',
					headers: {
						Accept: '*/*',
						Authorization: 'WhalleyBotAPI_F935H3ucUJRv7g==',
					},
				},
			);

			// Check if the response is okay
			if (!response.ok) {
				throw new Error('Network response was not ok');
			}

			//const playerInfo = document.getElementById('playerInfo');
			const dataP = await response.json();
			const FlagData = Object.values(dataP);

			// find all flags owened by squadMembers
			const flags = FlagData.filter((flag) =>
				squadMembers.map((member) => member).includes(flag.ownerID),
			);

			flagCount.innerHTML = ` üö© Flags:${flags.length} &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;`;

			details.innerHTML += `<hr class="infoHr"/>`;
			details.innerHTML += `<br>${flags.length} Flag(s): `;

			flags.forEach((flag) => {
				//details.innerHTML += `<br>${flag.location}`;

				const flagLocation = flag.location;
				const flagLocationX = flagLocation.split(' ')[0]; // -894859.312
				const flagLocationY = flagLocation.split(' ')[1]; // -276433.656

				if (isWithinPVP(flagLocationX, flagLocationY)) {
					details.innerHTML += `<br> üü• ${flagLocation}`; // üü• -894859.312 -276433.656 22457.848
				} else {
					details.innerHTML += `<br> üü© ${flagLocation}`; // üü© -894859.312 -276433.656 22457.848
				}
				details.innerHTML += `<br>`;
			});
		}

		async function getVehicleInfo(squadMembers) {
			try {
				// Fetch the list of vehicles
				const response = await fetch(
					`https://api.whalleybot.com/bot/217fc652/VehicleLocations`,
					{
						method: 'GET',
						headers: {
							Accept: '*/*',
							Authorization: 'WhalleyBotAPI_F935H3ucUJRv7g==',
						},
					},
				);

				if (!response.ok) {
					throw new Error('Failed to fetch vehicle data');
				}

				const dataV = await response.json();
				const vehiclesData = Object.values(dataV);

				// Filter vehicles owned by the player or squad members
				const ownedVehicles = vehiclesData.filter((vehicle) => {
					const regInfo = vehicle.value.reg;
					const ownerSteamID = regInfo.match(/STEAMID:(\d+)/)?.[1];
					if (ownerSteamID && ownerSteamID !== '0') {
						// check if ownerSteamID is one of the squadMembers
						const isSquadMember = squadMembers
							.map((member) => member.steamID)
							.includes(ownerSteamID);
						if (isSquadMember) {
							return vehicle;
						}
					}
				});
				vehicleCount.innerHTML = ` üöó Vehicle: ${ownedVehicles.length}`;

				// Display the vehicle information
				details.innerHTML += `<hr class="infoHr"/>`;
				details.innerHTML += `<br>${ownedVehicles.length} Vehicle(s):`;

				ownedVehicles.forEach((vehicle) => {
					const vidMatch = vehicle.value.reg.match(/VID:(\d+)/);
					const coords = vehicle.value.coords;
					const type = vehicle.value.type.replace('BPC_', '').trim();
					const internalStatus = vehicle.value.internalStatus;
					const status = internalStatus ? internalStatus : 'In Game';

					const vehicleLocationX = coords.split(' ')[0];
					const vehicleLocationY = coords.split(' ')[1];

					let zone = ``;

					if (isWithinPVP(vehicleLocationX, vehicleLocationY)) {
						zone = `üü•`;
					} else {
						zone = `üü©`;
					}

					details.innerHTML +=
						`<br>${type} - ${vidMatch ? vidMatch[1] : 'Unknown'}&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;` +
						`${status !== 'In Game' ? ` [${status}]` : ''} ${zone} ${coords}`;

					details.innerHTML += `<br>`;
				});
			} catch (error) {
				console.error('Error fetching or displaying vehicle data:', error);
			}
		}
	});
</script>

<style is:inline>
	#uploadBtnPlayers {
		margin-top: 0;
	}

	.playersList {
		display: flex;
		flex-direction: column;
		gap: 0.5em;
		max-height: 15em;
		overflow-y: auto;
		width: 100%;
	}

	.wrapper [type='radio'] {
		zoom: 2;
		width: unset;
		accent-color: var(--color-primary);
	}

	.wrapper hr {
		margin-top: 3em;
		margin-bottom: 1em;
	}

	.wrapper hr.infoHr {
		border: 0.25em solid var(--color-accent);
		border-radius: 0.5em;
	}

	.playerInfoWrapper.panel {
		border-radius: 0.5em;
		border: 3px solid var(--color-tertiary);
		background: var(--color-tertiary);
		padding: 2em;
		display: flex;
		flex-direction: column;
	}
</style>
