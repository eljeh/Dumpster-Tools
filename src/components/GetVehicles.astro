<h2 id='bpcCounts' class='mb-8 text-center'></h2>
<div id='VehicleContainer'></div>

<script>
  import { PUBLIC_WBAUTH, PUBLIC_WBBOTID } from 'astro:env/client';
  const WBAuth = PUBLIC_WBAUTH;
  const WBBotID = PUBLIC_WBBOTID;
  const bpcCountsContainer = document.getElementById('bpcCounts');
  document.addEventListener('astro:page-load', () => {
    function displayCounts(data) {
      // Display the count of each type
      var countsHTML = '';
      var regCount = 0;
      var total = 0;
      var counts = {};
      data.forEach((record) => {
        counts[record.value.type] = (counts[record.value.type] || 0) + 1;
        if (record.value.reg) {
          regCount++;
        }
      });
      // display the counts
      for (var type in counts) {
        total += counts[type];
      }

      countsHTML = 'Total Registered Vehicles: ' + regCount + ' / ' + total;
      bpcCountsContainer.innerHTML = countsHTML;
    }
    function isWithinPVP(flagLocationX, flagLocationY) {
      const PVP = {
        topLeftX: -904795.125, // Left-most X
        topLeftY: 619200.0, // Top-most Y
        bottomRightX: -297316.625, // Right-most X
        bottomRightY: -904795.125, // Bottom-most Y
      };

      // Check if the flag location is within the PVP zone
      return (
        flagLocationX >= PVP.topLeftX && // Right of left edge
        flagLocationX <= PVP.bottomRightX && // Left of right edge
        flagLocationY <= PVP.topLeftY && // Below top edge
        flagLocationY >= PVP.bottomRightY // Above bottom edge
      );
    }

    function displayApiAsTable() {
      const url = `https://api.whalleybot.com/bot/${WBBotID}/VehicleLocations`;
      fetch(url, {
        method: 'GET',
        headers: {
          Accept: '*/*',
          Authorization: WBAuth,
        },
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then((data) => {
          // Clear existing table rows
          const VehicleContainer = document.getElementById('VehicleContainer');
          VehicleContainer.innerHTML = '';

          displayCounts(data);

          var counts = {};
          data.forEach((record) => {
            // count how many of each type there are
            counts[record.value.type] = (counts[record.value.type] || 0) + 1;
          });
          var regCount = {};
          data.forEach((record) => {
            if (record.value.reg) {
              regCount[record.value.type] =
                (regCount[record.value.type] || 0) + 1;
            }
          });

          // display the counts
          for (var type in counts) {
            const typeId = type.toLowerCase().trim();
            VehicleContainer.innerHTML +=
              '<label for="type-' + typeId + '" class="listTitle">' +
                type.trim() + ': ' + (regCount[type] || 0) +' / ' + counts[type] +
              '</label>';

            const list = document.createElement('ul');
            list.id = 'list-' + typeId;
            list.classList.add('vehicleList');

            // Create checkbox after label but before list
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.id = 'type-' + typeId;
            VehicleContainer.appendChild(checkbox);

            // add type to list
            data.forEach((record) => {
              if (record.value.type === type) {
                const row = document.createElement('li');
                // remove everything after the first space in the steamID
                const steamID = record.value.reg.split(' ')[0];
                let vID = record.value.reg.replace(steamID, '');

                const vehicleLocationX = record.value.coords.split(' ')[0];
                const vehicleLocationY = record.value.coords.split(' ')[1];

                let zone = ``;

                if (isWithinPVP(vehicleLocationX, vehicleLocationY)) {
                  zone = `ðŸŸ¥`;
                } else {
                  zone = `ðŸŸ©`;
                }

                row.innerHTML = `
                  <span class="clickable" title="#TeleportToVehicle ${record.key}">${record.key}</span>
                  <span>${record.value.type}</span>
                  <span class="clickable" title="#Teleport ${record.value.coords}">${zone} ${record.value.coords}</span>
                  ${record.value.reg ? `<span class="clickable" title="${steamID.replace(/^STEAMID:/, '')}">${steamID}</span>` : '<span></span>'}
                  ${record.value.reg ? `<span class="clickable" title="#RenameVehicle ${record.key} 'VID:${record.key}'">${vID}</span>` : '<span>Unregistered</span>'}
              `;
                list.appendChild(row);
                VehicleContainer.appendChild(list);
              }
            });
          }
        })
        .catch((error) => {
          console.error('Error fetching or parsing data: ', error);
        });

      // Move clipboard function outside of displayApiAsTable
    }

    // Clipboard function moved here
    function copyToClipboard(element) {
      const text = element.title;
      navigator.clipboard.writeText(text).catch((err) => {
        console.error('Failed to copy:', err);
      });
    }

    // Add click handlers once
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('clickable')) {
        copyToClipboard(e.target);
        alert('Copied to clipboard: ' + e.target.title);
      }
    });

    displayApiAsTable();
  });
</script>

<style is:inline>
  .listTitle {
    font-size: 1.25em;
    font-weight: bold;
    cursor: pointer;
    background: var(--color-secondary);
    padding: 0.25em 0.5em;
    border-radius: 0.25em;
  }
  .listTitle:hover {
    background: var(--color-accent);
  }
  ul.vehicleList {
    display: none;
  }
  input[type='checkbox'] {
    display: none;
    visibility: hidden;
  }

  input[type='checkbox']:checked + .vehicleList {
    display: block;
  }
  .vehicleList li {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    gap: 0 1.5em;
    flex-wrap: wrap;
    border-bottom: 0.25em solid var(--color-primary);
    justify-content: flex-start;
  }
  .vehicleList li:hover {
    background: var(--color-primary);
  }
  .vehicleList li span {
    padding: 0.25em 0.5em;
    border-radius: 0.25em;
  }
  .vehicleList li span:hover {
    background: var(--color-accent);
    cursor: pointer;
  }
  .vehicleList li span:nth-child(1) {
    flex: 0 1 10ch;
  }
  .vehicleList li span:nth-child(2) {
    flex: 0 1 10ch;
  }
  .vehicleList li span:nth-child(3) {
    flex: 1 0 32ch;
  }
  .vehicleList li span:nth-child(4) {
    flex: 1 1 28ch;
  }
  .vehicleList li span:nth-child(5) {
    flex: 1 1 20ch;
  }

  #VehicleContainer > div {
    margin-bottom: 1em;
  }
</style>
