---

---

<div id='buttonPanel' class='flex flex-col gap-2 justify-center'></div>

<script>
	import { PUBLIC_WBAUTH, PUBLIC_WBBOTID } from 'astro:env/client';
	const WBAuth = PUBLIC_WBAUTH;
	const WBBotID = PUBLIC_WBBOTID;
	let bunkers = [];

	async function getBunkerList() {
		try {
			const response = await fetch(
				`https://api.whalleybot.com/bot/${WBBotID}/GetBunkers`,
				{
					method: 'GET',
					headers: {
						Accept: '*/*',
						Authorization: WBAuth,
					},
				},
			);

			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`);
			}

			const dataB = await response.json();
			bunkers = dataB;

			const buttonPanel = document.getElementById('buttonPanel');

			const normalBunkers = [
				{
					id: 'D0',
					status: 'Normal',
					location: 'X=-871767.875 Y=597019.250 Z=63084.723',
					sector: 'D0',
				},
				{
					id: 'D3',
					status: 'Normal',
					location: 'X=142191.672 Y=546498.188 Z=24782.061',
					sector: 'D3',
				},
				{
					id: 'C2',
					status: 'Normal',
					location: 'X=-221955.922 Y=186481.688 Z=76617.336',
					sector: 'C2',
				},
				{
					id: 'B4',
					status: 'Normal',
					location: 'X=443626.750 Y=-13702.469 Z=11979.164',
					sector: 'B4',
				},
				{
					id: 'A2',
					status: 'Normal',
					location: 'X=-40887.375 Y=-324878.438 Z=16259.652',
					sector: 'A2',
				},
				{
					id: 'AO',
					status: 'Normal',
					location: 'X=-769538.625 Y=-349752.062 Z=6468.148',
					sector: 'AO',
				},
				{
					id: 'Z4',
					status: 'Normal',
					location: 'X=521845.781 Y=-823576.562 Z=4945.017',
					sector: 'Z4',
				},
				{
					id: 'Z0',
					status: 'Normal',
					location: 'X=-700999.375 Y=-792435.812 Z=10776.563',
					sector: 'Z0',
				},
			];

			//append normalBunkers to dataB
			dataB.push(...normalBunkers);

			// Function to create sector buttons
			function createSectorButtons(sectorPrefix) {
				const sectors = dataB
					.filter((bunker) => bunker.sector.startsWith(sectorPrefix))
					.sort((a, b) => {
						const numA = parseInt(a.sector.slice(1), 10);
						const numB = parseInt(b.sector.slice(1), 10);
						return numB - numA;
					});

				const sectorDiv = document.createElement('div');
				sectorDiv.id = `${sectorPrefix.toLowerCase()}Sectors`;
				sectorDiv.className = 'flex gap-4';
				sectors.forEach((bunker) => {
					const div = document.createElement('div'); // Changed from button to div

					const activatedTime = new Date(
						bunker.activatedTime * 1000,
					).toLocaleString('en-US', {
						hour: '2-digit',
						minute: '2-digit',
						second: '2-digit',
						hour12: true,
					});

					let formattedActivatedTime = `Activated: ${activatedTime}`;
					if (activatedTime === 'Invalid Date') {
						formattedActivatedTime = '';
					}

					// bunker.nextAcivationTime is unixtimestamphere
					const nextActivationTime = new Date(
						bunker.nextAcivationTime * 1000,
					).toLocaleString('en-US', {
						hour: '2-digit',
						minute: '2-digit',
						second: '2-digit',
						hour12: true,
					});

					let formattedNextActivationTime = `Next Acivation: ${nextActivationTime}`;
					if (nextActivationTime === 'Invalid Date') {
						formattedNextActivationTime = '';
					}

					div.onclick = () => teleportTo(bunker.location); // Keep the click event
					div.className = `btn ${bunker.status.toLowerCase()}`; // Retain the status class
					div.title = `${formattedActivatedTime} ${formattedNextActivationTime}`; // Retain the title
					div.innerHTML = `${bunker.status}<br>${bunker.sector}`; // Update text content

					sectorDiv.appendChild(div); // Append the div instead of button
				});
				buttonPanel.appendChild(sectorDiv);
			}

			// Create buttons for each sector type
			['D', 'C', 'B', 'A', 'Z'].forEach(createSectorButtons);
		} catch (error) {
			console.error('Error:', error);
			alert(
				'An error occurred while fetching the bunker data. Please try again later.',
			);
		}
	}

	function teleportTo(element) {
		//var teleportToText = element.getAttribute('title');
		var teleportToText = element;
		teleportToText = '#Teleport ' + teleportToText; // Prepend "#TeleportToVehicle "

		// Create a temporary textarea to copy the modified text to the clipboard
		var tempText = document.createElement('textarea');
		tempText.value = teleportToText;
		document.body.appendChild(tempText);
		tempText.select();
		document.execCommand('copy');
		alert('Copied to clipboard');
		document.body.removeChild(tempText);
	}

	getBunkerList();
</script>
