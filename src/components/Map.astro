---
import zones from '../data/zones.json';
import settingZones from '../data/settingZones.json';
import MapControls from './MapControls.astro';

// Find the min and max coordinates to set up the viewport
let minX = Infinity;
let maxX = -Infinity;
let minY = Infinity;
let maxY = -Infinity;

Object.entries(zones).forEach(([_, zoneArray]) => {
	zoneArray.forEach((zone) => {
		if (!zone.TopLeft || !zone.BottomRight) return;
		const topLeft = {
			x: parseFloat(zone.TopLeft.split(' ')[0].replace('X=', '')),
			y: parseFloat(zone.TopLeft.split(' ')[1].replace('Y=', '')),
		};
		const bottomRight = {
			x: parseFloat(zone.BottomRight.split(' ')[0].replace('X=', '')),
			y: parseFloat(zone.BottomRight.split(' ')[1].replace('Y=', '')),
		};
		minX = Math.min(minX, topLeft.x, bottomRight.x);
		maxX = Math.max(maxX, topLeft.x, bottomRight.x);
		minY = Math.min(minY, topLeft.y, bottomRight.y);
		maxY = Math.max(maxY, topLeft.y, bottomRight.y);
	});
});

// Add some padding
const padding = (maxX - minX) * 0.05;
minX -= padding;
maxX += padding;
minY -= padding;
maxY += padding;

// Function to convert game coordinates to SVG coordinates
const toSvgX = (x: number) => ((x - minX) / (maxX - minX)) * 1000;
const toSvgY = (y: number) => 1000 - ((y - minY) / (maxY - minY)) * 1000; // Flip Y axis

const ZONE_NAME_MAPPINGS = {
	Sector_: (name: string) => name.replace('Sector_', ''),
	POI_PVP_: (name: string) => name.replace('POI_PVP_', 'PvP '),
	POI_PVE_: (name: string) => name.replace('POI_PVE_', 'PvE '),
	POI_custom_: (name: string) => name.replace('POI_custom_', ''),
	Bunkers_PVP: (name: string) => name.replace('Bunkers_PVP', 'PvP Bunker'),
	Bunkers_PVE: (name: string) => name.replace('Bunkers_PVE', 'PvE Bunker'),
	Outpost_: (name: string) => `${name.replace('Outpost_', '')} Outpost`,
	WarZoneDrops: (name: string) => name.replace('WarZoneDrops', 'Warzone Drops'),
} as const;

const formatZoneName = (zoneName: string): string => {
	const prefix = Object.keys(ZONE_NAME_MAPPINGS).find((key) =>
		zoneName.startsWith(key),
	);
	return prefix ? ZONE_NAME_MAPPINGS[prefix](zoneName) : zoneName;
};
---

<MapControls />

<div
	class='map-container'
	data-min-x={minX}
	data-max-x={maxX}
	data-min-y={minY}
	data-max-y={maxY}
>
	<svg viewBox='210 30 930 930' class='map'>
		<image
			href='../assets/images/map.webp'
			width='1000'
			height='1000'
			x='170'
			y='0'
		/>
		{
			Object.entries(zones).map(([zoneName, zoneArray]) =>
				zoneArray.map((zone) => {
					if (!zone.TopLeft || !zone.BottomRight) return null;

					const topLeft = {
						x: parseFloat(zone.TopLeft.split(' ')[0].replace('X=', '')),
						y: parseFloat(zone.TopLeft.split(' ')[1].replace('Y=', '')),
					};

					const bottomRight = {
						x: parseFloat(zone.BottomRight.split(' ')[0].replace('X=', '')),
						y: parseFloat(zone.BottomRight.split(' ')[1].replace('Y=', '')),
					};

					const width = Math.abs(toSvgX(topLeft.x) - toSvgX(bottomRight.x));
					const height = Math.abs(toSvgY(topLeft.y) - toSvgY(bottomRight.y));

					// flip left to right all the coordinates
					topLeft.x = -topLeft.x;
					bottomRight.x = -bottomRight.x;

					// if zoneName starts with Sector_, add zone-Sector_ to the class
					const sector = formatZoneName(zoneName);

					return (
						<g
							class={`zone-${zoneName}`}
							style={
								zoneName.includes('Sector_')
									? 'display: block;'
									: 'display: none;'
							}>
							<title>
								{`${sector}\nTop Left: (${topLeft.x.toFixed(2)}, ${topLeft.y.toFixed(2)})\nBottom Right: (${bottomRight.x.toFixed(2)}, ${bottomRight.y.toFixed(2)})`}
							</title>
							<rect
								x={toSvgX(Math.min(topLeft.x, bottomRight.x))}
								y={toSvgY(Math.max(topLeft.y, bottomRight.y))}
								width={width}
								height={height}
								class='zone-rect'
							/>
							<text
								x={toSvgX(Math.min(topLeft.x, bottomRight.x)) + width / 2}
								y={toSvgY(Math.max(topLeft.y, bottomRight.y)) + height / 2}
								class='zone-label'>
								{sector}
							</text>
						</g>
					);
				}),
			)
		}
		{
			Object.entries(settingZones).map(([zoneName, zoneArray]) =>
				zoneArray.map((zone) => {
					if (!zone.Center) return null;

					const center = {
						x: -parseFloat(zone.Center.split(' ')[0]), // Flip X coordinate
						y: parseFloat(zone.Center.split(' ')[1]),
					};

					// Handle both circular and rectangular zones
					const isCircular = zone.Radius !== undefined;
					let width, height, radius;

					if (isCircular) {
						radius = parseFloat(zone.Radius) * 100000;
					} else if (zone.size) {
						const [sizeX, sizeY] = zone.size
							.split(' ')
							.map((s) => parseFloat(s) * 100000);
						width = sizeX;
						height = sizeY;
					} else {
						return null;
					}

					// if zoneName starts with Sector_, add zone-Sector_ to the class
					const sector = formatZoneName(zoneName);

					return (
						<g
							class={`zone-${zoneName}`}
							style={
								zoneName.includes('Sector_')
									? 'display: block;'
									: 'display: none;'
							}>
							<title>
								{isCircular
									? `${sector}\nCenter: (${center.x.toFixed(2)}, ${center.y.toFixed(2)})\nRadius: ${zone.Radius}`
									: `${sector}\nCenter: (${center.x.toFixed(2)}, ${center.y.toFixed(2)})\nSize: ${zone.size}`}
							</title>

							{isCircular ? (
								<circle
									cx={toSvgX(center.x)}
									cy={toSvgY(center.y)}
									r={(radius / (maxX - minX)) * 1000}
									class='zone-circ'
								/>
							) : (
								<rect
									x={toSvgX(center.x - width)}
									y={toSvgY(center.y + height)}
									width={(width / (maxX - minX)) * 2000}
									height={(height / (maxY - minY)) * 2000}
									class='zone-rect'
								/>
							)}
							<text
								x={toSvgX(center.x)}
								y={toSvgY(center.y)}
								class='zone-label'>
								{sector
									.replace('PvP', '')
									.replace('PvE', '')
									.replace('PVP_', '')
									.replace('PVE_', '')}
							</text>
						</g>
					);
				}),
			)
		}
	</svg>
</div>

<div class='data-table-container'></div>

<script>
	import { displayFlagLocations } from '../utils/flagLocations';
	import { displayCurrentEvents } from '../utils/eventsLocations';
	import { displayKillPositions } from '../utils/killLocations';
	import { displayPlayerLocations } from '../utils/playerLocations';
	import { displayVehicleLocations } from '../utils/vehicleLocations';

	import {
		PUBLIC_WBAUTH,
		PUBLIC_WBBOTID,
		PUBLIC_ROOT,
		PUBLIC_FTP_HOST,
		PUBLIC_FTP_USER,
		PUBLIC_FTP_PASS,
	} from 'astro:env/client';
	const WBAuth = PUBLIC_WBAUTH;
	const WBBotID = PUBLIC_WBBOTID;
	const Root = PUBLIC_ROOT;
	const FTPHost = PUBLIC_FTP_HOST;
	const FTPUser = PUBLIC_FTP_USER;
	const FTPPass = PUBLIC_FTP_PASS;

	document.addEventListener('astro:page-load', () => {
		const mapContainer = document.querySelector('.map-container');
		const minX = parseFloat(mapContainer.dataset.minX);
		const maxX = parseFloat(mapContainer.dataset.maxX);
		const minY = parseFloat(mapContainer.dataset.minY);
		const maxY = parseFloat(mapContainer.dataset.maxY);

		const toSvgX = (x) => ((x - minX) / (maxX - minX)) * 1000;
		const toSvgY = (y) => 1000 - ((y - minY) / (maxY - minY)) * 1000;

		displayFlagLocations(toSvgX, toSvgY);
		displayCurrentEvents(toSvgX, toSvgY);
		displayKillPositions(toSvgX, toSvgY);
		displayPlayerLocations(toSvgX, toSvgY);
		displayVehicleLocations(toSvgX, toSvgY);
		setInterval(() => {
			displayCurrentEvents(toSvgX, toSvgY);
			displayPlayerLocations(toSvgX, toSvgY);
			displayVehicleLocations(toSvgX, toSvgY);
			displayKillPositions(toSvgX, toSvgY);
			displayFlagLocations(toSvgX, toSvgY);
		}, 300000);

		// Get all toggle checkboxes
		const sectorsToggle = document.getElementById('sectors-toggle');
		const playersToggle = document.getElementById('players-toggle');
		const vehicleToggle = document.getElementById('vehicles-toggle');
		const registeredVehiclesToggle = document.getElementById(
			'registered-vehicles-toggle',
		);
		const notRegisteredVehiclesToggle = document.getElementById(
			'not-registered-vehicles-toggle',
		);
		const flagsToggle = document.getElementById('flags-toggle');
		const eventsToggle = document.getElementById('events-toggle');
		const killsToggle = document.getElementById('kills-toggle');
		const ragerToggle = document.getElementById('rager-toggle');
		const wolfswagenToggle = document.getElementById('wolfswagen-toggle');
		const laikaToggle = document.getElementById('laika-toggle');
		const kingletdusterToggle = document.getElementById('kingletduster-toggle');
		const barbaToggle = document.getElementById('barba-toggle');
		const risToggle = document.getElementById('ris-toggle');
		const dirtbikeToggle = document.getElementById('dirtbike-toggle');
		const cruiserToggle = document.getElementById('cruiser-toggle');
		const bicyclesToggle = document.getElementById('bicycles-toggle');
		const wheelbarrowToggle = document.getElementById('wheelbarrow-toggle');
		const pvpToggle = document.getElementById('pvp-toggle');
		const pveToggle = document.getElementById('pve-toggle');
		const pveBunkerToggle = document.getElementById('pve-bunker-toggle');
		const pvpBunkerToggle = document.getElementById('pvp-bunker-toggle');
		const warzonesToggle = document.getElementById('warzones-toggle');
		const outpostsToggle = document.getElementById('outposts-toggle');
		const poisToggle = document.getElementById('pois-toggle');
		const bunkersToggle = document.getElementById('bunkers-toggle');
		const imageToggle = document.getElementById('image-toggle');
		const customPOIToggle = document.getElementById('custom-pois-toggle');

		// Function to toggle visibility
		function updateVisibility(toggleElement, selector) {
			if (!toggleElement) return;

			const updateElements = () => {
				const elements = document.querySelectorAll(selector);
				elements.forEach((element) => {
					// Special handling for vehicle markers container
					if (selector === '.vehicle-markers-container') {
						element.style.display = toggleElement.checked ? 'block' : 'none';
						return;
					}

					// For individual vehicle markers, check both the vehicles toggle and registration toggles
					if (selector.includes('.vehicle-marker')) {
						const isVehiclesEnabled = vehicleToggle.checked;
						const isRegistered = element.classList.contains('registered');
						const isRegisteredEnabled = registeredVehiclesToggle.checked;
						const isNotRegisteredEnabled = notRegisteredVehiclesToggle.checked;

						const shouldShow =
							isVehiclesEnabled &&
							((isRegistered && isRegisteredEnabled) ||
								(!isRegistered && isNotRegisteredEnabled));

						element.style.display = shouldShow ? 'block' : 'none';
					} else {
						element.style.display = toggleElement.checked ? 'block' : 'none';
					}
				});
			};

			toggleElement.addEventListener('change', updateElements);
			// Also update initial state
			updateElements();

			// For vehicle-specific toggles, also listen to vehicles toggle changes
			if (selector.includes('.vehicle-marker')) {
				vehicleToggle.addEventListener('change', updateElements);
				if (toggleElement !== registeredVehiclesToggle) {
					registeredVehiclesToggle.addEventListener('change', updateElements);
				}
				if (toggleElement !== notRegisteredVehiclesToggle) {
					notRegisteredVehiclesToggle.addEventListener(
						'change',
						updateElements,
					);
				}
			}
		}

		// Set up toggle handlers
		updateVisibility(sectorsToggle, '[class^="zone-Sector_"]');
		updateVisibility(playersToggle, '.player-markers-container');
		updateVisibility(flagsToggle, '.flag-markers-container');
		updateVisibility(eventsToggle, '.event-markers-container');
		updateVisibility(killsToggle, '.kill-markers-container');
		// updateVisibility(vehicleToggle, '.vehicle-markers-container');
		updateVisibility(ragerToggle, '.Rager');
		updateVisibility(wolfswagenToggle, '.WolfsWagen');
		updateVisibility(laikaToggle, '.Laika');
		updateVisibility(kingletdusterToggle, '.Kinglet_Duster');
		updateVisibility(barbaToggle, '.Barba, .BigRaft, .SmallRaft, .SUP');
		updateVisibility(risToggle, '.RIS');
		updateVisibility(dirtbikeToggle, '.Dirtbike');
		updateVisibility(cruiserToggle, '.Cruiser');
		updateVisibility(bicyclesToggle, '.MountainBike, .CityBike');
		updateVisibility(wheelbarrowToggle, '.WheelBarrow_Improvised');
		updateVisibility(wheelbarrowToggle, '.WheelBarrow_Metal');
		updateVisibility(pvpToggle, '.zone-PVP');
		updateVisibility(pveToggle, '.zone-PVE');
		updateVisibility(bunkersToggle, '[class^="zone-PVP_Bunker"]');
		updateVisibility(bunkersToggle, '[class^="zone-PVE_Bunker"]');
		updateVisibility(pveBunkerToggle, '[class^="zone-Bunkers_PVE"]');
		updateVisibility(pvpBunkerToggle, '[class^="zone-Bunkers_PVP"]');
		updateVisibility(warzonesToggle, '.zone-WarZoneDrops');
		updateVisibility(outpostsToggle, '[class^="zone-Outpost_"]');
		updateVisibility(poisToggle, '[class^="zone-POI_PVP"]');
		updateVisibility(poisToggle, '[class^="zone-POI_PVE"]');
		updateVisibility(customPOIToggle, '[class^="zone-POI_custom"]');
		updateVisibility(imageToggle, '.map image');
		updateVisibility(vehicleToggle, '.vehicle-markers-container');
		updateVisibility(registeredVehiclesToggle, '.vehicle-marker.registered');
		updateVisibility(
			notRegisteredVehiclesToggle,
			'.vehicle-marker.not-registered',
		);

		// Add zoom functionality
		const svg = document.querySelector('.map');
		let isZoomed = false;
		let currentZoom = null;
		const defaultViewBox = '210 30 930 930';
		const imageWidth = 930;
		const imageHeight = 930;
		const imageX = 210;
		const imageY = 30;

		// Function to handle zoom
		function zoomToElement(element) {
			if (!svg || !element) return;

			const rect = element.querySelector('.zone-rect');
			if (!rect) return;

			const bbox = rect.getBBox();
			const padding = 20;

			const viewBox = {
				x: bbox.x - padding,
				y: bbox.y - padding,
				width: bbox.width + padding * 2,
				height: bbox.height + padding * 2,
			};

			if (isZoomed && currentZoom === element) {
				svg.setAttribute('viewBox', defaultViewBox);
				isZoomed = false;
				currentZoom = null;
			} else {
				svg.setAttribute(
					'viewBox',
					`${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`,
				);
				isZoomed = true;
				currentZoom = element;
			}
		}

		// Add click handlers to sector zones
		document.querySelectorAll('[class^="zone-Sector_"]').forEach((zone) => {
			zone.style.cursor = 'pointer';
			zone.addEventListener('click', () => zoomToElement(zone));
		});

		// Add reset zoom on map container double click
		mapContainer.addEventListener('dblclick', (e) => {
			if (e.target === mapContainer || e.target === svg) {
				svg.setAttribute('viewBox', defaultViewBox);
				isZoomed = false;
				currentZoom = null;
			}
		});

		async function fetchLootData() {
			try {
				const response = await fetch(`${Root}/api/loot`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						host: FTPHost,
						user: FTPUser,
						password: FTPPass,
					}),
				});

				if (!response.ok) {
					throw new Error('Failed to fetch loot data');
				}

				const lootData = await response.json();
				displayLootLocations(lootData);
			} catch (error) {
				console.error('Error fetching loot data:', error);
			}
		}

		function displayLootLocations(lootData) {
			// Remove existing loot markers container
			document.querySelector('.loot-markers-container')?.remove();

			// Create container for loot markers
			const svg = document.querySelector('.map');
			const container = document.createElementNS(
				'http://www.w3.org/2000/svg',
				'g',
			);
			container.classList.add('loot-markers-container');

			lootData.forEach((loot) => {
				const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
				g.classList.add('loot-marker');

				// Add title element for tooltip
				const title = document.createElementNS(
					'http://www.w3.org/2000/svg',
					'title',
				);
				title.textContent = `Item: ${loot.name}\nQuantity: ${loot.quantity}\nLocation: (${loot.x}, ${loot.y})`;
				g.appendChild(title);

				// Create loot icon
				const marker = document.createElementNS(
					'http://www.w3.org/2000/svg',
					'circle',
				);
				marker.setAttribute('cx', toSvgX(-loot.x)); // Flip X coordinate
				marker.setAttribute('cy', toSvgY(loot.y));
				marker.setAttribute('r', '2');
				marker.classList.add('loot-icon');
				g.appendChild(marker);

				// Create text label
				const text = document.createElementNS(
					'http://www.w3.org/2000/svg',
					'text',
				);
				text.setAttribute('x', toSvgX(-loot.x));
				text.setAttribute('y', toSvgY(loot.y) - 5);
				text.textContent = loot.name;
				g.appendChild(text);

				container.appendChild(g);
			});

			svg.appendChild(container);
		}

		// Add loot toggle to controls
		const lootToggle = document.getElementById('loot-toggle');
		updateVisibility(lootToggle, '.loot-markers-container');
	});
</script>

<style is:inline>
	/* Base Variables */
	:root {
		/* Consolidate color variables */
		--color-white: hsl(0, 0%, 100%);
		--color-white-alpha: {
			--40: hsla(0, 0%, 100%, 0.4);
			--10: hsla(0, 0%, 100%, 0.1);
		}
		
		/* Zone color system */
		--zone: {
			--default: hsl(207, 44%, 49%);
			--pve: hsl(121, 100%, 75%);
			--pvp: hsl(0, 44%, 49%);
			--warzone: hsl(297, 44%, 49%);
			--community: hsl(308, 100%, 50%);
			--poi: {
				--custom: hsl(147, 41%, 41%);
				--pve: hsl(200, 50%, 40%);
				--pvp: hsl(69, 44%, 37%);
			}
		}
	;
	}

	/* Consolidated zone styles */
	.zone-rect {
		fill: var(--fill-color, var(--zone--default));
		stroke: var(--stroke-color, var(--zone--default));
		stroke-width: var(--stroke-width, 1);

		&:hover {
			fill: var(--hover-color, var(--zone--default-hover));
		}
	}

	/* Consolidated text styles */
	.zone-label {
		fill: var(--color-white);
		font-size: 0.3em;
		text-anchor: middle;
		dominant-baseline: middle;
		pointer-events: none;
		text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.8);
	}

	/* Marker styles */
	.marker {
		&-text {
			text-shadow: 0 0 8px rgba(0, 0, 0, 0.8);
			pointer-events: none;
			text-anchor: middle;
			fill: white;
			font-size: 0.3em;
			letter-spacing: 0.05em;
		}

		&-icon {
			filter: drop-shadow(2px 2px 2px rgba(0, 0, 0, 0.5));
			stroke: white;
			stroke-width: 0.5;
		}
	}

	/* Page Layout */
	h2.pageTitle {
		font-size: 1.25em;
		flex: auto;
		@media (max-width: 1024px) {
			flex: 0 1 100%;
		}
	}

	.overlay-controls {
		position: absolute;
		top: 5.2em;
		right: 1em;
		z-index: 1000;
		display: flex;
		flex-direction: column;
		flex-wrap: wrap;
		align-items: flex-start;
		width: 11em;
		gap: 0.5em;
		padding: 1em 1.5em;
		border-radius: 0.5em;
		background: var(--color-grey-darker);
		box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),
			var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);

		@media (max-width: 1024px) {
			width: 100%;
			position: absolute;
			top: 0;
			right: 0;
			flex-direction: row;
			justify-content: center;
			padding-bottom: 0;
			gap: 0 0.75em;
		}

		label {
			display: flex;
			flex-direction: row;
			gap: 0.5em;
			align-items: center;
		}

		input[type='checkbox'] {
			display: none;
			/* zoom: 1.5;
			@media (max-width: 1024px) {
				zoom: 1;
			} */
		}

		label:has(input[type='checkbox']:checked),
		input[type='checkbox']:checked ~ label {
			color: var(--color-selected);
		}
	}

	.data-table-container {
		/* position: absolute;
		top: calc(100vh - 10em);
		max-width: 78em; */
		width: 100%;
		padding: 1em 1.5em;
		border-radius: 0.5em;
		background: var(--color-grey-darker);
		box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),
			var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
	}

	/* Form Controls */

	.vehicle-container,
	.modifiers-container {
		display: flex;
		flex-direction: column;
		gap: 0.5em;
		align-items: start;
		justify-content: center;
		flex-wrap: wrap;
		flex-grow: 1;
		background: var(--color-grey-darker);
		&:hover,
		&:has(#vehicles-toggle:checked),
		&:has(#modifiers-toggle:checked) {
			outline: 1px solid #f9f9f963;
			outline-offset: 0.25em;
			border-radius: 0.125em;
		}
	}

	#vehicles-toggle,
	#modifiers-toggle {
		display: none;
	}

	#vehicles-toggle:checked,
	#modifiers-toggle:checked {
		~ label .close {
			display: inline;
		}
		~ label .open {
			display: none;
		}
	}
	#vehicles-toggle:not(:checked),
	#modifiers-toggle:not(:checked) {
		~ label .close {
			display: none;
		}
		~ label .open {
			display: inline;
		}
	}

	#vehicles-toggle:not(:checked) ~ .vehicle-types,
	#modifiers-toggle:not(:checked) ~ .loot-modifiers {
		display: none;
	}

	#vehicles-toggle:checked ~ .vehicle-types,
	#modifiers-toggle:checked ~ .loot-modifiers {
		display: flex;
	}

	.vehicle-types,
	.loot-modifiers {
		flex-direction: column;
		gap: 0.5em;
		align-items: start;
		background: var(--color-grey-darker);
	}

	/* Map Container */
	.map-container {
		display: flex;
		justify-content: center;
		align-items: center;
		width: 100%;
		overflow: hidden;
	}

	.map {
		scale: 1;

		image {
			translate: 60px 45px;
			scale: 0.91;
		}
	}

	/* Base Zone Styles */
	[class^='zone-Sector_'] text {
		fill: var(--color-white-40);
		font-size: 1em;
		text-anchor: middle;
		dominant-baseline: middle;
		pointer-events: none;
		text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.8);
		translate: -75px -75px;
	}

	.zone-label,
	[class^='zone-PVP_Bunker'] text,
	[class^='zone-PVE_Bunker'] text,
	[class^='zone-POI_PVE'] text,
	[class^='zone-POI_PVP'] text,
	[class^='zone-POI_custom_'] text,
	[class^='zone-Bunkers_PVE'] text,
	[class^='zone-Bunkers_PVP'] text,
	.zone-Outpost_A0 text,
	[class^='zone-Outpost_'] text,
	.zone-WarZoneDrops text,
	.zone-CommunityCenter text {
		fill: var(--color-white);
		font-size: 0.3em;
		text-anchor: middle;
		dominant-baseline: middle;
		pointer-events: none;
		font-weight: 300;
		letter-spacing: 0.1em;
		text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.8);
	}

	/* Zone Type Specific Styles */
	.zone-PVE .zone-rect {
		fill: var(--color-pve-fill);
		stroke: var(--color-pve);
		stroke-width: 1;
		&:hover {
			fill: var(--color-pve-hover);
		}
	}

	.zone-PVP .zone-rect {
		fill: var(--color-pvp-fill);
		stroke: var(--color-pvp);
		stroke-width: 1;
	}

	.zone-WarZoneDrops .zone-rect {
		fill: var(--color-warzone-fill);
		stroke: var(--color-warzone);
		stroke-width: 0;
	}

	.zone-CommunityCenter .zone-rect {
		fill: var(--color-community-fill);
		stroke: var(--color-community);
		stroke-width: 0.5;
	}

	/* Sector Styles */
	[class^='zone-Sector_'] {
		.zone-rect {
			stroke: var(--color-white-10);
			stroke-width: 1;
			cursor: pointer;
		}
	}

	/* POI and Outpost Styles */
	[class^='zone-Outpost_'] .zone-circ,
	[class^='zone-POI_custom_'] .zone-circ {
		fill: var(--color-custom-poi-fill);
		stroke: var(--color-custom-poi);
		stroke-width: 0.5;
	}
	[class^='zone-PVE_Bunker'] .zone-circ,
	[class^='zone-POI_PVE'] .zone-rect,
	[class^='zone-POI_PVE'] .zone-circ,
	[class^='zone-Bunkers_PVE'] .zone-rect,
	[class^='zone-Bunkers_PVE'] .zone-circ {
		fill: var(--color-pve-poi-fill);
		stroke: var(--color-pve-poi);
		stroke-width: 0.5;
	}

	[class^='zone-PVP_Bunker'] .zone-circ,
	[class^='zone-POI_PVP'] .zone-rect,
	[class^='zone-POI_PVP'] .zone-circ,
	.zone-Outpost_A0 .zone-rect,
	.zone-Outpost_A0 .zone-circ,
	[class^='zone-Bunkers_PVP'] .zone-rect,
	[class^='zone-Bunkers_PVP'] .zone-circ {
		fill: var(--color-pvp-poi-fill);
		stroke: var(--color-pvp-poi);
		stroke-width: 0.5;
	}

	/* Player Marker Styles */
	.player-marker text {
		text-shadow: 0px 0px 8px rgba(0, 0, 0, 0.8);
		pointer-events: none;
		text-anchor: middle;
		fill: white;
		font-size: 0.3em;
		stroke: none;
		letter-spacing: 0.05em;
	}

	.player-marker circle {
		filter: drop-shadow(2px 2px 2px rgba(0, 0, 0, 0.5));
		fill: red;
		stroke: white;
		stroke-width: 0.5;
	}

	/* Vehicle Marker Styles */
	.vehicle-marker text {
		text-shadow: 0px 0px 8px rgba(0, 0, 0, 0.8);
		pointer-events: none;
		text-anchor: middle;
		fill: white;
		font-size: 0.3em;
		stroke: none;
		letter-spacing: 0.05em;
		.not-registered {
			fill: red;
		}
	}

	.vehicle-marker .vehicle-icon {
		filter: drop-shadow(2px 2px 2px rgba(0, 0, 0, 0.5));
		fill: blue;
		stroke: white;
		stroke-width: 0.5;
	}
	.vehicle-marker.not-registered .vehicle-icon {
		stroke: red;
	}

	/* Event Marker Styles */
	.event-marker text {
		text-shadow: 0px 0px 8px rgba(0, 0, 0, 0.8);
		pointer-events: none;
		text-anchor: middle;
		fill: white;
		font-size: 0.5em;
		stroke: none;
		letter-spacing: 0.05em;
	}

	.event-marker .event-zone {
		fill: hsla(60, 100%, 50%, 0.2);
		stroke: hsl(60, 100%, 50%);
		stroke-width: 1;
		stroke-dasharray: 10 5;
	}

	/* Kill Marker Styles */
	.kill-marker text {
		text-shadow: 0px 0px 8px rgba(0, 0, 0, 0.8);
		pointer-events: none;
		text-anchor: middle;
		fill: white;
		font-size: 0.25em;
		stroke: none;
		letter-spacing: 0.05em;
	}

	.kill-marker .kill-icon {
		filter: drop-shadow(2px 2px 2px rgba(0, 0, 0, 0.5));
		stroke: white;
		stroke-width: 0.25;
	}

	.kill-marker.killer .kill-icon {
		fill: red;
	}

	.kill-marker.victim .kill-icon {
		fill: black;
	}

	.kill-marker.suicide .kill-icon {
		fill: purple;
	}

	.kill-line {
		stroke: red;
		stroke-width: 0.25;
		stroke-dasharray: 5, 5;
		opacity: 0.5;
	}

	/* Flag Marker Styles */
	.flag-marker text {
		text-shadow: 0px 0px 8px rgba(0, 0, 0, 0.8);
		pointer-events: none;
		text-anchor: middle;
		fill: white;
		font-size: 0.3em;
		stroke: none;
		letter-spacing: 0.05em;
	}

	.flag-marker .flag-icon {
		filter: drop-shadow(2px 2px 2px rgba(0, 0, 0, 0.5));
		fill: orange;
		stroke: white;
		stroke-width: 0.5;
	}

	/* Loot Marker Styles */
	.loot-marker text {
		text-shadow: 0px 0px 8px rgba(0, 0, 0, 0.8);
		pointer-events: none;
		text-anchor: middle;
		fill: white;
		font-size: 0.3em;
		stroke: none;
		letter-spacing: 0.05em;
	}

	.loot-marker .loot-icon {
		filter: drop-shadow(2px 2px 2px rgba(0, 0, 0, 0.5));
		fill: green;
		stroke: white;
		stroke-width: 0.5;
	}

	/* Table Styles */
	.player-data-table {
		width: 100%;
		border-collapse: collapse;
		margin-top: 1em;
		color: var(--color-white);
	}

	.player-data-table th,
	.player-data-table td {
		padding: 0.5em;
		text-align: left;
		border-bottom: 1px solid var(--color-white-10);
		background: var(--color-white-40);
	}

	.player-data-table th {
		font-weight: bold;
		background-color: var(--color-white-10);
	}

	.player-data-table tr:hover {
		background-color: var(--color-white-10);
	}
</style>
