---
import zones from '../data/zones.json';
import settingZones from '../data/settingZones.json';

// Find the min and max coordinates to set up the viewport
let minX = Infinity;
let maxX = -Infinity;
let minY = Infinity;
let maxY = -Infinity;

Object.entries(zones).forEach(([_, zoneArray]) => {
	zoneArray.forEach((zone) => {
		if (!zone.TopLeft || !zone.BottomRight) return;
		const topLeft = {
			x: parseFloat(zone.TopLeft.split(' ')[0].replace('X=', '')),
			y: parseFloat(zone.TopLeft.split(' ')[1].replace('Y=', '')),
		};
		const bottomRight = {
			x: parseFloat(zone.BottomRight.split(' ')[0].replace('X=', '')),
			y: parseFloat(zone.BottomRight.split(' ')[1].replace('Y=', '')),
		};
		minX = Math.min(minX, topLeft.x, bottomRight.x);
		maxX = Math.max(maxX, topLeft.x, bottomRight.x);
		minY = Math.min(minY, topLeft.y, bottomRight.y);
		maxY = Math.max(maxY, topLeft.y, bottomRight.y);
	});
});

// Add some padding
const padding = (maxX - minX) * 0.05;
minX -= padding;
maxX += padding;
minY -= padding;
maxY += padding;

// Function to convert game coordinates to SVG coordinates
const toSvgX = (x: number) => ((x - minX) / (maxX - minX)) * 1000;
const toSvgY = (y: number) => 1000 - ((y - minY) / (maxY - minY)) * 1000; // Flip Y axis

const ZONE_NAME_MAPPINGS = {
	Sector_: (name: string) => name.replace('Sector_', ''),
	POI_PVP_: (name: string) => name.replace('POI_PVP_', 'PvP '),
	POI_PVE_: (name: string) => name.replace('POI_PVE_', 'PvE '),
	POI_custom_: (name: string) => name.replace('POI_custom_', ''),
	Bunkers_PVP: (name: string) => name.replace('Bunkers_PVP', 'PvP Bunker'),
	Bunkers_PVE: (name: string) => name.replace('Bunkers_PVE', 'PvE Bunker'),
	Outpost_: (name: string) => `${name.replace('Outpost_', '')} Outpost`,
	WarZoneDrops: (name: string) => name.replace('WarZoneDrops', 'Warzone Drops'),
} as const;

const formatZoneName = (zoneName: string): string => {
	const prefix = Object.keys(ZONE_NAME_MAPPINGS).find((key) =>
		zoneName.startsWith(key),
	);
	return prefix ? ZONE_NAME_MAPPINGS[prefix](zoneName) : zoneName;
};
---

<div class='overlay-controls'>
	<h2 class='pageTitle text-center'>Map Zones</h2>
	<label><input type='checkbox' id='pois-toggle' />POIs</label>
	<label><input type='checkbox' id='bunkers-toggle' />Bunkers</label>
	<label><input type='checkbox' id='outposts-toggle' />Outposts</label>
	<label><input type='checkbox' checked id='sectors-toggle' />Sectors</label>
	<label><input type='checkbox' checked id='image-toggle' />Image</label>
	<div class='modifiers-container'>
		<input type='checkbox' id='modifiers-toggle' />
		<label for='modifiers-toggle'>
			<span class='modifiers close'>Loots Modifiers ▲</span>
			<span class='modifiers open'>Loots Modifiers ▼</span>
		</label>
		<div class='loot-modifiers'>
			<label><input type='checkbox' id='pvp-toggle' />PvP</label>
			<label><input type='checkbox' id='pve-toggle' />PvE</label>
			<label><input type='checkbox' id='custom-pois-toggle' />POIs</label>
			<label><input type='checkbox' id='pve-bunker-toggle' />PvE Bunkers</label>
			<label><input type='checkbox' id='pvp-bunker-toggle' />PvP Bunkers</label>
			<label><input type='checkbox' id='warzones-toggle' />Warzones</label>
		</div>
	</div>
</div>
<div class='map-container'>
	<svg viewBox='170 0 1000 1000' class='map'>
		<image
			href='../assets/images/map.webp'
			width='1000'
			height='1000'
			x='170'
			y='0'
		/>
		{
			Object.entries(zones).map(([zoneName, zoneArray]) =>
				zoneArray.map((zone) => {
					if (!zone.TopLeft || !zone.BottomRight) return null;

					const topLeft = {
						x: parseFloat(zone.TopLeft.split(' ')[0].replace('X=', '')),
						y: parseFloat(zone.TopLeft.split(' ')[1].replace('Y=', '')),
					};

					const bottomRight = {
						x: parseFloat(zone.BottomRight.split(' ')[0].replace('X=', '')),
						y: parseFloat(zone.BottomRight.split(' ')[1].replace('Y=', '')),
					};

					const width = Math.abs(toSvgX(topLeft.x) - toSvgX(bottomRight.x));
					const height = Math.abs(toSvgY(topLeft.y) - toSvgY(bottomRight.y));

					// flip left to right all the coordinates
					topLeft.x = -topLeft.x;
					bottomRight.x = -bottomRight.x;

					// if zoneName starts with Sector_, add zone-Sector_ to the class
					const sector = formatZoneName(zoneName);

					return (
						<g
							class={`zone-${zoneName}`}
							style={
								zoneName.includes('Sector_')
									? 'display: block;'
									: 'display: none;'
							}>
							<title>
								{`${sector}\nTop Left: (${topLeft.x.toFixed(2)}, ${topLeft.y.toFixed(2)})\nBottom Right: (${bottomRight.x.toFixed(2)}, ${bottomRight.y.toFixed(2)})`}
							</title>
							<rect
								x={toSvgX(Math.min(topLeft.x, bottomRight.x))}
								y={toSvgY(Math.max(topLeft.y, bottomRight.y))}
								width={width}
								height={height}
								class='zone-rect'
							/>
							<text
								x={toSvgX(Math.min(topLeft.x, bottomRight.x)) + width / 2}
								y={toSvgY(Math.max(topLeft.y, bottomRight.y)) + height / 2}
								class='zone-label'>
								{sector}
							</text>
						</g>
					);
				}),
			)
		}
		{
			Object.entries(settingZones).map(([zoneName, zoneArray]) =>
				zoneArray.map((zone) => {
					if (!zone.Center) return null;

					const center = {
						x: -parseFloat(zone.Center.split(' ')[0]), // Flip X coordinate
						y: parseFloat(zone.Center.split(' ')[1]),
					};

					// Handle both circular and rectangular zones
					const isCircular = zone.Radius !== undefined;
					let width, height, radius;

					if (isCircular) {
						radius = parseFloat(zone.Radius) * 100000;
					} else if (zone.size) {
						const [sizeX, sizeY] = zone.size
							.split(' ')
							.map((s) => parseFloat(s) * 100000);
						width = sizeX;
						height = sizeY;
					} else {
						return null;
					}

					// if zoneName starts with Sector_, add zone-Sector_ to the class
					const sector = formatZoneName(zoneName);

					return (
						<g
							class={`zone-${zoneName}`}
							style={
								zoneName.includes('Sector_')
									? 'display: block;'
									: 'display: none;'
							}>
							<title>
								{isCircular
									? `${sector}\nCenter: (${center.x.toFixed(2)}, ${center.y.toFixed(2)})\nRadius: ${zone.Radius}`
									: `${sector}\nCenter: (${center.x.toFixed(2)}, ${center.y.toFixed(2)})\nSize: ${zone.size}`}
							</title>

							{isCircular ? (
								<circle
									cx={toSvgX(center.x)}
									cy={toSvgY(center.y)}
									r={(radius / (maxX - minX)) * 1000}
									class='zone-circ'
								/>
							) : (
								<rect
									x={toSvgX(center.x - width)}
									y={toSvgY(center.y + height)}
									width={(width / (maxX - minX)) * 2000}
									height={(height / (maxY - minY)) * 2000}
									class='zone-rect'
								/>
							)}
							<text
								x={toSvgX(center.x)}
								y={toSvgY(center.y)}
								class='zone-label'>
								{sector.replace('PvP', '').replace('PvE', '')}
							</text>
						</g>
					);
				}),
			)
		}
	</svg>
</div>

<script>
	// Get all toggle checkboxes
	const sectorsToggle = document.getElementById('sectors-toggle');
	const pvpToggle = document.getElementById('pvp-toggle');
	const pveToggle = document.getElementById('pve-toggle');
	const pveBunkerToggle = document.getElementById('pve-bunker-toggle');
	const pvpBunkerToggle = document.getElementById('pvp-bunker-toggle');
	const warzonesToggle = document.getElementById('warzones-toggle');
	const outpostsToggle = document.getElementById('outposts-toggle');
	const poisToggle = document.getElementById('pois-toggle');
	const bunkersToggle = document.getElementById('bunkers-toggle');
	const imageToggle = document.getElementById('image-toggle');
	const customPOIToggle = document.getElementById('custom-pois-toggle');

	// Function to toggle visibility
	function updateVisibility(toggleElement, selector) {
		if (!toggleElement) return;

		const zones = document.querySelectorAll(selector);
		toggleElement.addEventListener('change', (e) => {
			zones.forEach((zone) => {
				zone.style.display = e.target.checked ? 'block' : 'none';
			});
		});
	}

	// Set up toggle handlers
	updateVisibility(sectorsToggle, '[class^="zone-Sector_"]');
	updateVisibility(pvpToggle, '.zone-PVP');
	updateVisibility(pveToggle, '.zone-PVE');
	updateVisibility(
		bunkersToggle,
		'[class^="zone-PVP_Bunker"], [class^="zone-PVE_Bunker"]',
	);
	updateVisibility(pveBunkerToggle, '[class^="zone-Bunkers_PVE"]');
	updateVisibility(pvpBunkerToggle, '[class^="zone-Bunkers_PVP"]');
	updateVisibility(warzonesToggle, '.zone-WarZoneDrops');
	updateVisibility(outpostsToggle, '[class^="zone-Outpost_"]');
	updateVisibility(
		poisToggle,
		'[class^="zone-POI_PVP"], [class^="zone-POI_PVE"]',
	);
	updateVisibility(customPOIToggle, '[class^="zone-POI_custom"]');
	updateVisibility(imageToggle, '.map image');

	// Add zoom functionality
	const svg = document.querySelector('.map');
	const mapContainer = document.querySelector('.map-container');
	let isZoomed = false;
	let currentZoom = null;

	// Function to handle zoom
	function zoomToElement(element) {
		if (!svg || !element) return;

		const rect = element.querySelector('.zone-rect');
		if (!rect) return;

		const bbox = rect.getBBox();
		const padding = 50; // Padding around the zoomed area

		// Calculate zoom parameters
		const viewBox = {
			x: bbox.x - padding,
			y: bbox.y - padding,
			width: bbox.width + padding * 2,
			height: bbox.height + padding * 2,
		};

		if (isZoomed && currentZoom === element) {
			// Reset zoom
			svg.setAttribute('viewBox', '170 0 1000 1000');
			isZoomed = false;
			currentZoom = null;
		} else {
			// Zoom to element
			svg.setAttribute(
				'viewBox',
				`${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`,
			);
			isZoomed = true;
			currentZoom = element;
		}
	}

	// Add click handlers to sector zones
	document.querySelectorAll('[class^="zone-Sector_"]').forEach((zone) => {
		zone.style.cursor = 'pointer';
		zone.addEventListener('click', () => zoomToElement(zone));
	});

	// Add reset zoom on map container double click
	mapContainer.addEventListener('dblclick', (e) => {
		if (e.target === mapContainer || e.target === svg) {
			svg.setAttribute('viewBox', '170 0 1000 1000');
			isZoomed = false;
			currentZoom = null;
		}
	});
</script>

<style is:inline>
	:root {
		/* Base colors */
		--color-white: hsl(0, 0%, 100%);
		--color-white-40: hsla(0, 0%, 100%, 0.4);
		--color-white-10: hsla(0, 0%, 100%, 0.1);

		/* Zone colors */
		--color-zone-default: hsl(207, 44%, 49%);
		--color-zone-default-fill: hsla(207, 44%, 49%, 0.02);
		--color-zone-default-hover: hsla(207, 44%, 49%, 0.4);

		/* PvE colors */
		--color-pve: hsl(121, 100%, 75%);
		--color-pve-fill: hsla(121, 100%, 75%, 0.009);
		--color-pve-hover: hsla(121, 100%, 50%, 0.04);

		/* PvP colors */
		--color-pvp: hsla(0, 44%, 49%, 0.75);
		--color-pvp-fill: hsla(0, 44%, 49%, 0.5);

		/* Special zone colors */
		--color-warzone: hsla(297, 44%, 49%, 0.75);
		--color-warzone-fill: hsla(297, 44%, 49%, 0.5);

		--color-community: hsla(308, 100%, 50%, 0.75);
		--color-community-fill: hsla(308, 100%, 50%, 0.5);

		/* POI and Outpost colors */
		--color-custom-poi: hsla(147, 41%, 41%, 0.75);
		--color-custom-poi-fill: hsla(147, 41%, 41%, 0.5);

		--color-pve-poi: hsla(200, 50%, 40%, 0.75);
		--color-pve-poi-fill: hsla(200, 50%, 40%, 0.5);

		--color-pvp-poi: hsla(69, 44%, 37%, 0.75);
		--color-pvp-poi-fill: hsla(69, 44%, 37%, 0.5);
	}

	/* Page Layout */
	h2.pageTitle {
		font-size: 1.25em;
		flex: auto;
		@media (max-width: 1024px) {
			flex: 0 1 100%;
		}
	}

	.overlay-controls {
		position: absolute;
		top: 5em;
		right: 1em;
		z-index: 1000;
		display: flex;
		flex-direction: column;
		flex-wrap: wrap;
		align-items: flex-start;
		gap: 0.5em;
		padding: 1em 1.5em;
		border-radius: 0.5em;
		background: var(--color-grey-darker);
		box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),
			var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);

		@media (max-width: 1024px) {
			position: relative;
			top: 0;
			right: 0;
			flex-direction: row;
			justify-content: center;
			padding-bottom: 0;
			gap: 0 0.75em;
		}
	}

	/* Form Controls */
	label {
		display: flex;
		flex-direction: row;
		gap: 0.5em;
		align-items: center;
	}

	input[type='checkbox'] {
		zoom: 1.5;
		@media (max-width: 1024px) {
			zoom: 1;
		}
	}

	.modifiers-container {
		display: flex;
		flex-direction: column;
		gap: 0.5em;
		align-items: start;
		justify-content: center;
		flex-wrap: wrap;
		flex-grow: 1;
		&:hover,
		&:has(#modifiers-toggle:checked) {
			outline: 1px solid #f9f9f963;
			outline-offset: 0.25em;
			border-radius: 0.125em;
		}
	}

	#modifiers-toggle {
		display: none;
	}
	#modifiers-toggle:checked {
		~ label .modifiers.close {
			display: inline;
		}
		~ label .modifiers.open {
			display: none;
		}
	}
	#modifiers-toggle:not(:checked) {
		~ label .modifiers.close {
			display: none;
		}
		~ label .modifiers.open {
			display: inline;
		}
	}

	#modifiers-toggle:not(:checked) ~ .loot-modifiers {
		display: none;
	}
	#modifiers-toggle:checked ~ .loot-modifiers {
		display: flex;
	}
	.loot-modifiers {
		flex-direction: column;
		gap: 0.5em;
		align-items: start;
	}

	/* Map Container */
	.map-container {
		display: flex;
		justify-content: center;
		align-items: center;
		width: 100%;
		overflow: hidden;
	}

	.map {
		scale: 1;

		image {
			translate: 60px 45px;
			scale: 0.91;
		}
	}

	/* Base Zone Styles */
	.zone-rect {
		fill: var(--color-zone-default-fill);
		stroke: var(--color-zone-default-fill);
		stroke-width: 1;

		&:hover {
			fill: var(--color-zone-default-hover);
		}
	}

	[class^='zone-Sector_'] text {
		fill: var(--color-white-40);
		font-size: 1em;
		text-anchor: middle;
		dominant-baseline: middle;
		pointer-events: none;
		text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.8);
		translate: -75px -75px;
	}

	.zone-label,
	[class^='zone-PVP_Bunker'] text,
	[class^='zone-PVE_Bunker'] text,
	[class^='zone-POI_PVE'] text,
	[class^='zone-POI_PVP'] text,
	[class^='zone-POI_custom_'] text,
	[class^='zone-Bunkers_PVE'] text,
	[class^='zone-Bunkers_PVP'] text,
	.zone-Outpost_A0 text,
	[class^='zone-Outpost_'] text,
	.zone-WarZoneDrops text,
	.zone-CommunityCenter text {
		fill: var(--color-white);
		font-size: 0.3em;
		text-anchor: middle;
		dominant-baseline: middle;
		pointer-events: none;
		font-weight: 300;
		letter-spacing: 0.1em;
		text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.8);
	}

	/* Zone Type Specific Styles */
	.zone-PVE .zone-rect {
		fill: var(--color-pve-fill);
		stroke: var(--color-pve);
		stroke-width: 1;
		&:hover {
			fill: var(--color-pve-hover);
		}
	}

	.zone-PVP .zone-rect {
		fill: var(--color-pvp-fill);
		stroke: var(--color-pvp);
		stroke-width: 1;
	}

	.zone-WarZoneDrops .zone-rect {
		fill: var(--color-warzone-fill);
		stroke: var(--color-warzone);
		stroke-width: 0;
	}

	.zone-CommunityCenter .zone-rect {
		fill: var(--color-community-fill);
		stroke: var(--color-community);
		stroke-width: 0.5;
	}

	/* Sector Styles */
	[class^='zone-Sector_'] {
		.zone-rect {
			stroke: var(--color-white-10);
			stroke-width: 1;
			cursor: pointer;
		}
	}

	/* POI and Outpost Styles */
	[class^='zone-Outpost_'] .zone-circ,
	[class^='zone-POI_custom_'] .zone-circ {
		fill: var(--color-custom-poi-fill);
		stroke: var(--color-custom-poi);
		stroke-width: 0.5;
	}
	[class^='zone-PVE_Bunker'] .zone-circ,
	[class^='zone-POI_PVE'] .zone-rect,
	[class^='zone-POI_PVE'] .zone-circ,
	[class^='zone-Bunkers_PVE'] .zone-rect,
	[class^='zone-Bunkers_PVE'] .zone-circ {
		fill: var(--color-pve-poi-fill);
		stroke: var(--color-pve-poi);
		stroke-width: 0.5;
	}

	[class^='zone-PVP_Bunker'] .zone-circ,
	[class^='zone-POI_PVP'] .zone-rect,
	[class^='zone-POI_PVP'] .zone-circ,
	.zone-Outpost_A0 .zone-rect,
	.zone-Outpost_A0 .zone-circ,
	[class^='zone-Bunkers_PVP'] .zone-rect,
	[class^='zone-Bunkers_PVP'] .zone-circ {
		fill: var(--color-pvp-poi-fill);
		stroke: var(--color-pvp-poi);
		stroke-width: 0.5;
	}
</style>
