---
		const WBAuth = import.meta.env.WBAuth;
		const WBBotID = import.meta.env.WBBotID;
---

<form class='w-full flex flex-col item-center'>
	<div class='flex flex-col items-start justify-center mb-6'>
		<label
			for='playerIDSelect-op'
			class='block font-bold pr-4 mb-2'
			for='inline-full-name'
		>
			Player Name
		</label>

		<select id='playerIDSelect-op'>
			<option value='76561198187036603'>...loading data</option>
		</select>
	</div>

	<div class='flex flex-col items-start justify-center mb-6'>
		<label
			for='packNameSelect'
			class='block font-bold pr-4 mb-2'
			for='inline-full-name'
		>
			Pack Name
		</label>

		<select id='packNameSelect-op'>
			<option value='170270'>...loading data</option>
		</select>
	</div>

	<!-- <hr class='my-4' /> -->

	<footer class='flex items-center justify-end mb-6'>
		<button id='orderButton' class='glassmorphism'> Order Pack </button>
	</footer>
</form>

<script>
  import { PUBLIC_WBAUTH, PUBLIC_WBBOTID } from 'astro:env/client';
	const WBAuth = PUBLIC_WBAUTH;
	const WBBotID = PUBLIC_WBBOTID;
	document.addEventListener('astro:page-load', () => {
		// Get the order button element
		const orderButton = document.getElementById('orderButton');

		// Add event listener to handle button click
		orderButton.addEventListener('click', async (event) => {
			event.preventDefault();

			// Get the selected player and pack elements
			const playerIDSelect = document.getElementById('playerIDSelect-op');
			const packNameSelect = document.getElementById('packNameSelect');

			// Check if both player and pack are selected
			if (playerIDSelect.value && packNameSelect.value) {
				try {
					// Send a POST request to order the pack
					const response = await fetch(
						`https://api.whalleybot.com/bot/${WBBotID}/SendPack/${playerIDSelect.value}/${packNameSelect.value}/1`,
						{
							method: 'POST',
							headers: {
								Accept: '*/*',
								Authorization: WBAuth,
							},
						},
					);

					// Check if the response is okay
					if (!response.ok) {
						throw new Error('Network response was not ok');
					}
					alert(`Ordering ${packNameSelect.value} for ${playerIDSelect.value}`);
					// Parse the response data
					const data = await response.json();
					console.log('Order pack response:', data);
				} catch (error) {
					console.error('Error ordering pack:', error);
				}
			} else {
				console.error('Please select a player and pack');
			}
		});

		// Fetch data from the given URL
		async function fetchData(url) {
			try {
				const response = await fetch(url, {
					method: 'GET',
					headers: {
						Accept: '*/*',
						Authorization: WBAuth,
					},
				});

				// Check if the response is okay
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}

				// Parse the response data
				const data = await response.json();
				return data;
			} catch (error) {
				console.error('Error fetching or parsing data:', error);
				throw error;
			}
		}

		// Populate the player select dropdown
		async function populatePlayerSelect() {
			try {
				const data = await fetchData(
					`https://api.whalleybot.com/bot/${WBBotID}/PlayerLocations`,
				);

				const playerSelect = document.getElementById('playerIDSelect-op');
				playerSelect.innerHTML = '<option value="">Select a player</option>';

				// Add options to the player select dropdown
				data.sort((a, b) => a.playerName.localeCompare(b.playerName));
				data.forEach((player) => {
					const option = new Option(player.playerName, player.steamID);
					playerSelect.appendChild(option);
				});
			} catch (error) {
				console.error('Error populating player select:', error);
			}
		}

		// Populate the pack select dropdown
		async function populatePackSelect() {
			try {
				let allPacks = [];
				let pageNumber = 1;
				let nextPageExists = true;

				// Fetch all packs until no more pages exist
				while (nextPageExists) {
					const data = await fetchData(
						`https://api.whalleybot.com/bot/${WBBotID}/GetPacks/${pageNumber}`,
					);

					// Check if there are packs in the current page
					if (data && data.packData && data.packData.length > 0) {
						allPacks = allPacks.concat(data.packData);
						pageNumber++;
					} else {
						nextPageExists = false;
					}
				}

				const packSelect = document.getElementById('packNameSelect-op');
				packSelect.innerHTML = '<option value="">Select a pack name</option>';

				// sort alphabetically
				allPacks.sort((a, b) => a.name.localeCompare(b.name));
				allPacks.forEach((pack) => {
					const option = new Option(pack.name, pack.packID);
					packSelect.add(option);
				});
			} catch (error) {
				console.error('Error populating pack select:', error);
			}
		}

		// Populate the dropdowns when the page loads
		populatePlayerSelect();
		populatePackSelect();
	});
</script>
