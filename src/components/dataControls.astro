<div class='data-controls'>
	<div class='mainNav-container'>
		<label><input type='checkbox' id='players-toggle' />Players</label><span
			class='nav-divider'>|</span
		>
		<label><input type='checkbox' id='vehicles-toggle' />Vehicles</label><span
			class='nav-divider'>|</span
		>
		<label><input type='checkbox' id='flags-toggle' />Flags</label><span
			class='nav-divider'>|</span
		>
		<label><input type='checkbox' id='kills-toggle' />Kills</label><span
			class='nav-divider'>|</span
		>
		<label><input type='checkbox' id='modifiers-toggle' />Loots Modifiers</label
		><span class='nav-divider'>|</span>
		<label
			><input type='checkbox' id='settingZones-toggle' />Settings Zones</label
		>
	</div>

	<div class='subNav-container'>
		<div class='player-location'>
			<label>
				<input type='checkbox' checked id='player-PVE-toggle' />
				PvE
			</label><span class='nav-divider'>|</span>
			<label>
				<input type='checkbox' checked id='player-PVP-toggle' />
				PvP
			</label>
		</div>
		<div class='vehicle-types'>
			<label>
				<input type='checkbox' checked id='registered-vehicles-toggle' />
				Registered
			</label><span class='nav-divider'>|</span>
			<label>
				<input type='checkbox' checked id='not-registered-vehicles-toggle' />
				Not Registered
			</label>
		</div>

		<div class='loot-modifiers'>
			<label><input type='checkbox' id='mapZones-toggle' />Map Zones</label>
			<span class='nav-divider'>|</span>
			<label><input type='checkbox' id='pois-pvp-toggle' />PvP POIs</label>
			<span class='nav-divider'>|</span>
			<label><input type='checkbox' id='pois-pve-toggle' />PvE POIs</label>
			<span class='nav-divider'>|</span>
			<label><input type='checkbox' id='pve-bunker-toggle' />PvE Bunkers</label>
			<span class='nav-divider'>|</span>
			<label><input type='checkbox' id='pvp-bunker-toggle' />PvP Bunkers</label>
			<span class='nav-divider'>|</span>
			<label><input type='checkbox' id='warzones-toggle' />Warzones</label>
		</div>

		<div class='settingZones'>
			<label><input type='checkbox' id='events-toggle' />Events</label>
			<span class='nav-divider'>|</span>
			<label><input type='checkbox' id='bunkers-toggle' />Bunkers</label>
			<span class='nav-divider'>|</span>
			<label><input type='checkbox' id='outposts-toggle' />Outposts</label>
			<span class='nav-divider'>|</span>
			<label><input type='checkbox' id='pvpzones-toggle' />PvP Zones</label>
			<span class='nav-divider'>|</span>
			<label
				><input type='checkbox' id='serverzones-toggle' />Server Zones</label
			>
		</div>
	</div>

</div>

<script>
	import { isWithinPVP } from '../utils/pvpUtils';
	import { PUBLIC_WBAUTH, PUBLIC_WBBOTID } from 'astro:env/client';
	const WBAuth = PUBLIC_WBAUTH;
	const WBBotID = PUBLIC_WBBOTID;

	document.addEventListener('DOMContentLoaded', async () => {
		// Function to update player counts
		async function updatePlayerCounts() {
			try {
				const response = await fetch(
					`https://api.whalleybot.com/bot/${WBBotID}/PlayerLocations`,
					{
						method: 'GET',
						headers: {
							Accept: '*/*',
							Authorization: WBAuth,
						},
					},
				);

				if (!response.ok) {
					throw new Error('Network response was not ok');
				}

				const players = await response.json();
				let pveCount = 0;
				let pvpCount = 0;

				players.forEach((player) => {
					const [x, y] = player.lastKnownLocation.split(' ');
					if (isWithinPVP(x, y)) {
						pvpCount++;
					} else {
						pveCount++;
					}
				});

				// Update the counts in the DOM
				const pveLabel = document.querySelector(
					'label:has(#player-PVE-toggle)',
				);
				const pvpLabel = document.querySelector(
					'label:has(#player-PVP-toggle)',
				);
				if (pveLabel)
					pveLabel.innerHTML = `<input type='checkbox' checked id='player-PVE-toggle' />PvE (${pveCount})`;
				if (pvpLabel)
					pvpLabel.innerHTML = `<input type='checkbox' checked id='player-PVP-toggle' />PvP (${pvpCount})`;
			} catch (error) {
				console.error('Error updating player counts:', error);
			}
		}

		// Initial update
		await updatePlayerCounts();

		// Update every 5 minutes
		setInterval(updatePlayerCounts, 300000);

		// Add event listeners for PvE and PvP toggles
		const pveToggle = document.getElementById(
			'player-PVE-toggle',
		) as HTMLInputElement;
		const pvpToggle = document.getElementById(
			'player-PVP-toggle',
		) as HTMLInputElement;

		pveToggle?.addEventListener('change', () => {
			// Dispatch a custom event that other components can listen to
			const event = new CustomEvent('pveToggleChanged', {
				detail: { checked: pveToggle.checked },
			});
			document.dispatchEvent(event);

			// Toggle visibility of PvE players
			document.querySelectorAll('.player-pve').forEach((player) => {
				(player as HTMLElement).style.display = pveToggle.checked ? '' : 'none';
			});
		});

		pvpToggle?.addEventListener('change', () => {
			// Dispatch a custom event that other components can listen to
			const event = new CustomEvent('pvpToggleChanged', {
				detail: { checked: pvpToggle.checked },
			});
			document.dispatchEvent(event);

			// Toggle visibility of PvP players
			document.querySelectorAll('.player-pvp').forEach((player) => {
				(player as HTMLElement).style.display = pvpToggle.checked ? '' : 'none';
			});
		});

		const mainNavToggles = document.querySelectorAll(
			'.mainNav-container input[type="checkbox"]',
		);
		const playerLocation = document.querySelector(
			'.player-location',
		) as HTMLElement;
		const vehiclesToggle = document.getElementById(
			'vehicles-toggle',
		) as HTMLInputElement;
		const vehicleTypes = document.querySelector(
			'.vehicle-types',
		) as HTMLElement;
		const modifiersToggle = document.getElementById(
			'modifiers-toggle',
		) as HTMLInputElement;
		const lootModifiers = document.querySelector(
			'.loot-modifiers',
		) as HTMLElement;
		const settingZonesToggle = document.getElementById(
			'settingZones-toggle',
		) as HTMLInputElement;
		const settingZones = document.querySelector('.settingZones') as HTMLElement;

		mainNavToggles.forEach((toggle) => {
			toggle.addEventListener('change', (e) => {
				const currentToggle = e.target as HTMLInputElement;

				// Deselect other toggles
				mainNavToggles.forEach((otherToggle) => {
					if (otherToggle !== currentToggle) {
						(otherToggle as HTMLInputElement).checked = false;
					}
				});

				// Handle visibility of sub-sections
				const playersToggle = document.getElementById(
					'players-toggle',
				) as HTMLInputElement;
				playerLocation.style.display = playersToggle?.checked ? 'flex' : 'none';
				vehicleTypes.style.display = vehiclesToggle.checked ? 'flex' : 'none';
				lootModifiers.style.display = modifiersToggle.checked ? 'flex' : 'none';
				settingZones.style.display = settingZonesToggle.checked
					? 'flex'
					: 'none';
			});
		});
	});
</script>

<style>
	.data-controls {
		max-height: fit-content;
		display: flex;
		flex-direction: column;
		flex-wrap: wrap;
		padding: 0.75em 1em;
		border-radius: 0.5em;
		background: var(--color-grey-dark);
		@media (max-width: 1024px) {
			overflow-x: scroll;
		}
		label {
			display: flex;
			flex-direction: row;
			gap: 0.5em;
			align-items: center;
		}

		input[type='checkbox'] {
			display: none;
		}

		label:has(input[type='checkbox']:checked),
		input[type='checkbox']:checked ~ label {
			color: var(--color-selected);
		}
	}

	.mainNav-container,
	.subNav-container {
		display: flex;
		flex-direction: row;
		gap: 0.5em 1em;
	}

	.mainNav-container {
		position: relative;
	}

	.map-controls {
		display: flex;
		gap: 1em;
		position: absolute;
		right: 0;
	}
	.subNav-container {
		flex-direction: column;
	}

	.nav-divider {
		font-size: 2em;
		color: var(--color-grey-darker);
		line-height: 0.65;
	}

	/* Form Controls */
	.vehicle-container,
	.modifiers-container,
	.settingZones-container {
		display: flex;
		flex-direction: column;
		gap: 0.5em;
		align-items: start;
		justify-content: center;
		flex-wrap: wrap;
		&:hover,
		&:has(#vehicles-toggle:checked),
		&:has(#modifiers-toggle:checked) {
			outline: 1px solid #f9f9f963;
			outline-offset: 0.25em;
			border-radius: 0.125em;
		}
	}

	.player-location,
	.vehicle-types,
	.loot-modifiers,
	.settingZones,
	.serverZones {
		margin-top: 1em;
		display: none;
		flex-direction: row;
		gap: 0.5em;
		align-items: start;
	}
</style>
